/* 1차통계-메서드 버전별 */
CREATE TABLE BXT_STAT_VER_METHOD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PROC_KEY VARCHAR2(100) NOT NULL, /* 처리키 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	TEST_CNT NUMBER(8), /* 테스트건수 */
	EXCEPTION_CNT NUMBER(8), /* 익셉션건수 */
	OCCR_EXCEPTION_CNT NUMBER(8), /* 발생익셉션건수 */
	ROOT_TEST_CNT NUMBER(8), /* 루트테스트건수 */
	ROOT_EXCEPTION_CNT NUMBER(8), /* 루트익셉션건수 */
	ROOT_OCCR_EXCEPTION_CNT NUMBER(8), /* 루트발생익셉션건수 */
	TOT_ELAPSED_MILLIS NUMBER(20), /* 총 경과시간 밀리초 */
	MIN_ELAPSED_MILLIS NUMBER(20), /* 최소 경과시간 밀리초 */
	MAX_ELAPSED_MILLIS NUMBER(20), /* 최대 경과시간 밀리초 */
	FRST_TEST_DTTM VARCHAR2(23), /* 최초테스트일시 */
	LAST_TEST_DTTM VARCHAR2(23) /* 최종테스트일시 */
);

COMMENT ON TABLE BXT_STAT_VER_METHOD IS '1차통계-메서드 버전별';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.PROC_KEY IS '처리키';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.TEST_CNT IS '테스트건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.EXCEPTION_CNT IS '익셉션건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.OCCR_EXCEPTION_CNT IS '발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.ROOT_TEST_CNT IS '루트테스트건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.ROOT_EXCEPTION_CNT IS '루트익셉션건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.ROOT_OCCR_EXCEPTION_CNT IS '루트발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.TOT_ELAPSED_MILLIS IS '총 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.MIN_ELAPSED_MILLIS IS '최소 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.MAX_ELAPSED_MILLIS IS '최대 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.FRST_TEST_DTTM IS '최초테스트일시';

COMMENT ON COLUMN BXT_STAT_VER_METHOD.LAST_TEST_DTTM IS '최종테스트일시';

CREATE UNIQUE INDEX PK_BXT_STAT_VER_METHOD
	ON BXT_STAT_VER_METHOD (
		SYS_ID ASC,
		PROC_KEY ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		METHOD_VER_HASH_ID ASC
	);

ALTER TABLE BXT_STAT_VER_METHOD
	ADD
		CONSTRAINT PK_BXT_STAT_VER_METHOD
		PRIMARY KEY (
			SYS_ID,
			PROC_KEY,
			CLASS_ID,
			METHOD_ID,
			METHOD_VER_HASH_ID
		);

/* 1차통계-메서드 버전별 유닛 실행라인 */
CREATE TABLE BXT_STAT_VER_METHOD_LINE (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PROC_KEY VARCHAR2(100) NOT NULL, /* 처리키 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	SEQ NUMBER(8) NOT NULL, /* 일련번호 */
	LINE_DATA VARCHAR2(4000) /* 라인 데이터 */
);

COMMENT ON TABLE BXT_STAT_VER_METHOD_LINE IS '1차통계-메서드 버전별 유닛 실행라인';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.PROC_KEY IS '처리키';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.SEQ IS '일련번호';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_LINE.LINE_DATA IS '라인 데이터';

CREATE UNIQUE INDEX PK_BXT_STAT_VER_METHOD_LINE
	ON BXT_STAT_VER_METHOD_LINE (
		SYS_ID ASC,
		PROC_KEY ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		METHOD_VER_HASH_ID ASC,
		SEQ ASC
	);

ALTER TABLE BXT_STAT_VER_METHOD_LINE
	ADD
		CONSTRAINT PK_BXT_STAT_VER_METHOD_LINE
		PRIMARY KEY (
			SYS_ID,
			PROC_KEY,
			CLASS_ID,
			METHOD_ID,
			METHOD_VER_HASH_ID,
			SEQ
		);

/* 1차통계-메소드별 종속 메소드 실행 패턴 */
CREATE TABLE BXT_STAT_VER_METHOD_DEPD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PROC_KEY VARCHAR2(100) NOT NULL, /* 처리키 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	CALLEE_CLASS_ID VARCHAR2(64) NOT NULL, /* 피호출자 클래스ID */
	CALLEE_METHOD_ID VARCHAR2(32) NOT NULL, /* 피호출자 메소드ID */
	CALLEE_METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 피호출자 메소드 버전해쉬ID */
	TEST_CNT NUMBER(8), /* 테스트 건수 */
	EXCEPTION_CNT NUMBER(8), /* 익셉션 건수 */
	TOT_ELAPSED_MILLIS NUMBER(20), /* 총 경과 시간 밀리초 */
	MIN_ELAPSED_MILLIS NUMBER(20), /* 최소 경과시간 밀리초 */
	MAX_ELAPSED_MILLIS NUMBER(20), /* 최대 경과시간 밀리초 */
	FRST_TEST_DTTM VARCHAR2(23), /* 최초테스트일시 */
	LAST_TEST_DTTM VARCHAR2(23), /* 최종 테스트 일시 */
	LAST_TEST_UNIT_UID VARCHAR2(32) /* 최종 테스트 유닛 UID */
);

COMMENT ON TABLE BXT_STAT_VER_METHOD_DEPD IS '1차통계-메소드별 종속 메소드 실행 패턴';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.PROC_KEY IS '처리키';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.CALLEE_CLASS_ID IS '피호출자 클래스ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.CALLEE_METHOD_ID IS '피호출자 메소드ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.CALLEE_METHOD_VER_HASH_ID IS '피호출자 메소드 버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.TEST_CNT IS '테스트 건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.EXCEPTION_CNT IS '익셉션 건수';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.TOT_ELAPSED_MILLIS IS '총 경과 시간 밀리초';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.MIN_ELAPSED_MILLIS IS '최소 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.MAX_ELAPSED_MILLIS IS '최대 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.FRST_TEST_DTTM IS '최초테스트일시';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.LAST_TEST_DTTM IS '최종 테스트 일시';

COMMENT ON COLUMN BXT_STAT_VER_METHOD_DEPD.LAST_TEST_UNIT_UID IS '최종 테스트 유닛 UID';

CREATE UNIQUE INDEX PK_BXT_STAT_VER_METHOD_DEPD
	ON BXT_STAT_VER_METHOD_DEPD (
		SYS_ID ASC,
		PROC_KEY ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		METHOD_VER_HASH_ID ASC,
		CALLEE_CLASS_ID ASC,
		CALLEE_METHOD_ID ASC,
		CALLEE_METHOD_VER_HASH_ID ASC
	);

ALTER TABLE BXT_STAT_VER_METHOD_DEPD
	ADD
		CONSTRAINT PK_BXT_STAT_VER_METHOD_DEPD
		PRIMARY KEY (
			SYS_ID,
			PROC_KEY,
			CLASS_ID,
			METHOD_ID,
			METHOD_VER_HASH_ID,
			CALLEE_CLASS_ID,
			CALLEE_METHOD_ID,
			CALLEE_METHOD_VER_HASH_ID
		);

/* 1차통계-익셉션 버전별 실행 패턴 */
CREATE TABLE BXT_STAT_EXCEPTION (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
	EXCEPTION_QN VARCHAR2(1000) NOT NULL, /* 익셉션 퀄리파이드 네임 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	CATCH_YN VARCHAR2(1) NOT NULL, /* CATCH 여부 */
	OCCR_EXCEPTION_CNT NUMBER(8), /* 발생익셉션건수 */
	FRST_TEST_DTTM VARCHAR2(23), /* 최초테스트일시 */
	LAST_TEST_DTTM VARCHAR2(23) /* 최종 테스트일시 */
);

COMMENT ON TABLE BXT_STAT_EXCEPTION IS '1차통계-익셉션 버전별 실행 패턴';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.EXCEPTION_QN IS '익셉션 퀄리파이드 네임';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.CATCH_YN IS 'CATCH 여부';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.OCCR_EXCEPTION_CNT IS '발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.FRST_TEST_DTTM IS '최초테스트일시';

COMMENT ON COLUMN BXT_STAT_EXCEPTION.LAST_TEST_DTTM IS '최종 테스트일시';

CREATE UNIQUE INDEX PK_BXT_STAT_EXCEPTION
	ON BXT_STAT_EXCEPTION (
		SYS_ID ASC,
		EXCEPTION_QN ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		METHOD_VER_HASH_ID ASC,
		CATCH_YN ASC
	);

ALTER TABLE BXT_STAT_EXCEPTION
	ADD
		CONSTRAINT PK_BXT_STAT_EXCEPTION
		PRIMARY KEY (
			SYS_ID,
			EXCEPTION_QN,
			CLASS_ID,
			METHOD_ID,
			METHOD_VER_HASH_ID,
			CATCH_YN
		);

/* 1차통계-익셥션 버전별 실행 패턴별 목록 */
CREATE TABLE BXT_STAT_EXCEPTION_LIST (
	TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 테스트 유닛 UID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
	EXCEPTION_QN VARCHAR2(1000) NOT NULL, /* 익셉션 퀄리파이드 네임 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	CATCH_YN VARCHAR2(1) NOT NULL, /* CATCH 여부 */
	EXCEPTION_MSG VARCHAR2(4000), /* 익셉션 메시지 */
	BEGIN_DTTM VARCHAR2(23) /* 시작 일시 */
);

COMMENT ON TABLE BXT_STAT_EXCEPTION_LIST IS '1차통계-익셥션 버전별 실행 패턴별 목록';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.TEST_UNIT_UID IS '테스트 유닛 UID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.EXCEPTION_QN IS '익셉션 퀄리파이드 네임';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.CATCH_YN IS 'CATCH 여부';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.EXCEPTION_MSG IS '익셉션 메시지';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_LIST.BEGIN_DTTM IS '시작 일시';

CREATE UNIQUE INDEX PK_BXT_STAT_EXCEPTION_LIST
	ON BXT_STAT_EXCEPTION_LIST (
		TEST_UNIT_UID ASC,
		SYS_ID ASC,
		EXCEPTION_QN ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		METHOD_VER_HASH_ID ASC,
		CATCH_YN ASC
	);

ALTER TABLE BXT_STAT_EXCEPTION_LIST
	ADD
		CONSTRAINT PK_BXT_STAT_EXCEPTION_LIST
		PRIMARY KEY (
			TEST_UNIT_UID,
			SYS_ID,
			EXCEPTION_QN,
			CLASS_ID,
			METHOD_ID,
			METHOD_VER_HASH_ID,
			CATCH_YN
		);

/* 2차통계-메소드 현황 */
CREATE TABLE BXT_STAT_ACCUM_METHOD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PROC_KEY VARCHAR2(100) NOT NULL, /* 처리키 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	PROC_BASE_DATE VARCHAR2(8), /* 처리기준일자 */
	DEL_YN VARCHAR2(1), /* 삭제 여부 */
	CLASS_QN VARCHAR2(1000) NOT NULL, /* 클래스 퀄리파이드네임 */
	METHOD_SG VARCHAR2(1000) NOT NULL, /* 메소드 시그니처 */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	METHOD_RET_DC VARCHAR2(1000) NOT NULL, /* 메소드리턴디스크립터 */
	PACKAGE_NM VARCHAR2(1000) NOT NULL, /* 패키지 명 */
	CLASS_NM VARCHAR2(1000) NOT NULL, /* 클래스 명 */
	METHOD_NM VARCHAR2(1000) NOT NULL, /* 메소드 명 */
	BRANCH_CNT NUMBER(8), /* 브랜치건수 */
	EXEC_BRANCH_CNT NUMBER(8), /* 실행브랜치건수 */
	LINE_CNT NUMBER(8), /* 라인건수 */
	EXEC_LINE_CNT NUMBER(8), /* 실행라인건수 */
	CALLER_CNT NUMBER(8), /* 호출자건수 */
	EXEC_CALLER_CNT NUMBER(8), /* 실행호출자건수 */
	CALLEE_CNT NUMBER(8), /* 피호출자건수 */
	EXEC_CALLEE_CNT NUMBER(8), /* 실행피호출자건수 */
	FRST_TEST_DTTM VARCHAR2(23), /* 최초테스트일시 */
	LAST_TEST_DTTM VARCHAR2(23), /* 최종테스트일시 */
	TEST_CNT NUMBER(8), /* 테스트건수 */
	EXCEPTION_CNT NUMBER(8), /* 익셉션건수 */
	OCCR_EXCEPTION_CNT NUMBER(8), /* 발생익셉션건수 */
	ROOT_TEST_CNT NUMBER(8), /* 루트테스트건수 */
	ROOT_EXCEPTION_CNT NUMBER(8), /* 루트익셉션건수 */
	ROOT_OCCR_EXCEPTION_CNT NUMBER(8), /* 루트발생익셉션건수 */
	TOT_ELAPSED_MILLIS NUMBER(20), /* 총 경과시간 밀리초 */
	MIN_ELAPSED_MILLIS NUMBER(20), /* 최소 경과시간 밀리초 */
	MAX_ELAPSED_MILLIS NUMBER(20), /* 최대 경과시간 밀리초 */
	PAST_MAX_BRANCH_CNT NUMBER(8), /* 과거최대 브랜치건수 */
	PAST_MAX_EXEC_BRANCH_CNT NUMBER(8), /* 과거최대 실행브랜치건수 */
	PAST_MAX_LINE_CNT NUMBER(8), /* 과거최대 라인건수 */
	PAST_MAX_EXEC_LINE_CNT NUMBER(8), /* 과거최대 실행라인건수 */
	PAST_MAX_CALLER_CNT NUMBER(8), /* 과거최대 호출자건수 */
	PAST_MAX_EXEC_CALLER_CNT NUMBER(8), /* 과거최대 실행호출자건수 */
	PAST_MAX_CALLEE_CNT NUMBER(8), /* 과거최대 피호출자건수 */
	PAST_MAX_EXEC_CALLEE_CNT NUMBER(8), /* 과거최대 실행피호출자건수 */
	ALL_FRST_TEST_DTTM VARCHAR2(23), /* 전체최초테스트일시 */
	ALL_LAST_TEST_DTTM VARCHAR2(23), /* 전체최종테스트일시 */
	ALL_TEST_CNT NUMBER(8), /* 전체테스트건수 */
	ALL_EXCEPTION_CNT NUMBER(8), /* 전체익셉션건수 */
	ALL_OCCR_EXCEPTION_CNT NUMBER(8), /* 전체발생익셉션건수 */
	ALL_ROOT_TEST_CNT NUMBER(8), /* 전체루트테스트건수 */
	ALL_ROOT_EXCEPTION_CNT NUMBER(8), /* 전체루트익셉션건수 */
	ALL_ROOT_OCCR_EXCEPTION_CNT NUMBER(8), /* 전체루트발생익셉션건수 */
	ALL_TOT_ELAPSED_MILLIS NUMBER(20), /* 전체 총 경과시간 밀리초 */
	ALL_MIN_ELAPSED_MILLIS NUMBER(20), /* 전체 최소 경과시간 밀리초 */
	ALL_MAX_ELAPSED_MILLIS NUMBER(20), /* 전체 최대 경과시간 밀리초 */
	USER_ID VARCHAR2(32), /* 사용자 ID */
	USER_NM VARCHAR2(100), /* 사용자 명 */
	DEPT_ID VARCHAR2(32), /* 부서 ID */
	DEPT_NM VARCHAR2(100), /* 부서 명 */
	CLASS_KOR_NM VARCHAR2(1000), /* 클래스 한글 명 */
	MANGMT_LV_CD_NM VARCHAR2(100) /* 관리레벨코드명 */
);

COMMENT ON TABLE BXT_STAT_ACCUM_METHOD IS '2차통계-메소드 현황';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PROC_KEY IS '처리키';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PROC_BASE_DATE IS '처리기준일자';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.DEL_YN IS '삭제 여부';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.METHOD_SG IS '메소드 시그니처';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.METHOD_RET_DC IS '메소드리턴디스크립터';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PACKAGE_NM IS '패키지 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.CLASS_NM IS '클래스 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.METHOD_NM IS '메소드 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.BRANCH_CNT IS '브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.EXEC_BRANCH_CNT IS '실행브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.LINE_CNT IS '라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.EXEC_LINE_CNT IS '실행라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.CALLER_CNT IS '호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.EXEC_CALLER_CNT IS '실행호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.CALLEE_CNT IS '피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.EXEC_CALLEE_CNT IS '실행피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.FRST_TEST_DTTM IS '최초테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.LAST_TEST_DTTM IS '최종테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.TEST_CNT IS '테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.EXCEPTION_CNT IS '익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.OCCR_EXCEPTION_CNT IS '발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ROOT_TEST_CNT IS '루트테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ROOT_EXCEPTION_CNT IS '루트익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ROOT_OCCR_EXCEPTION_CNT IS '루트발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.TOT_ELAPSED_MILLIS IS '총 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.MIN_ELAPSED_MILLIS IS '최소 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.MAX_ELAPSED_MILLIS IS '최대 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_BRANCH_CNT IS '과거최대 브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_EXEC_BRANCH_CNT IS '과거최대 실행브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_LINE_CNT IS '과거최대 라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_EXEC_LINE_CNT IS '과거최대 실행라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_CALLER_CNT IS '과거최대 호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_EXEC_CALLER_CNT IS '과거최대 실행호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_CALLEE_CNT IS '과거최대 피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.PAST_MAX_EXEC_CALLEE_CNT IS '과거최대 실행피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_FRST_TEST_DTTM IS '전체최초테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_LAST_TEST_DTTM IS '전체최종테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_TEST_CNT IS '전체테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_EXCEPTION_CNT IS '전체익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_OCCR_EXCEPTION_CNT IS '전체발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_ROOT_TEST_CNT IS '전체루트테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_ROOT_EXCEPTION_CNT IS '전체루트익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_ROOT_OCCR_EXCEPTION_CNT IS '전체루트발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_TOT_ELAPSED_MILLIS IS '전체 총 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_MIN_ELAPSED_MILLIS IS '전체 최소 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.ALL_MAX_ELAPSED_MILLIS IS '전체 최대 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.USER_ID IS '사용자 ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.USER_NM IS '사용자 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.DEPT_ID IS '부서 ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.DEPT_NM IS '부서 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.CLASS_KOR_NM IS '클래스 한글 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD.MANGMT_LV_CD_NM IS '관리레벨코드명';

CREATE UNIQUE INDEX PK_BXT_STAT_ACCUM_METHOD
	ON BXT_STAT_ACCUM_METHOD (
		SYS_ID ASC,
		PROC_KEY ASC,
		CLASS_ID ASC,
		METHOD_ID ASC
	);

CREATE INDEX IX_BXT_STAT_ACCUM_METHOD_01
	ON BXT_STAT_ACCUM_METHOD (
		CLASS_QN ASC
	);

CREATE INDEX IX_BXT_STAT_ACCUM_METHOD_02
	ON BXT_STAT_ACCUM_METHOD (
		PACKAGE_NM ASC
	);

ALTER TABLE BXT_STAT_ACCUM_METHOD
	ADD
		CONSTRAINT PK_BXT_STAT_ACCUM_METHOD
		PRIMARY KEY (
			SYS_ID,
			PROC_KEY,
			CLASS_ID,
			METHOD_ID
		);

/* 2차통계-메소드 현황 일별내역 */
CREATE TABLE BXT_STAT_ACCUM_METHOD_HST (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PROC_KEY VARCHAR2(100) NOT NULL, /* 처리키 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	PROC_BASE_DATE VARCHAR2(8) NOT NULL, /* 처리기준일자 */
	DEL_YN VARCHAR2(1), /* 삭제 여부 */
	CLASS_QN VARCHAR2(1000) NOT NULL, /* 클래스 퀄리파이드네임 */
	METHOD_SG VARCHAR2(1000) NOT NULL, /* 메소드 시그니처 */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	METHOD_RET_DC VARCHAR2(1000) NOT NULL, /* 메소드리턴디스크립터 */
	PACKAGE_NM VARCHAR2(1000) NOT NULL, /* 패키지 명 */
	CLASS_NM VARCHAR2(1000) NOT NULL, /* 클래스 명 */
	METHOD_NM VARCHAR2(1000) NOT NULL, /* 메소드 명 */
	BRANCH_CNT NUMBER(8), /* 브랜치건수 */
	EXEC_BRANCH_CNT NUMBER(8), /* 실행브랜치건수 */
	LINE_CNT NUMBER(8), /* 라인건수 */
	EXEC_LINE_CNT NUMBER(8), /* 실행라인건수 */
	CALLER_CNT NUMBER(8), /* 호출자건수 */
	EXEC_CALLER_CNT NUMBER(8), /* 실행호출자건수 */
	CALLEE_CNT NUMBER(8), /* 피호출자건수 */
	EXEC_CALLEE_CNT NUMBER(8), /* 실행피호출자건수 */
	FRST_TEST_DTTM VARCHAR2(23), /* 최초테스트일시 */
	LAST_TEST_DTTM VARCHAR2(23), /* 최종테스트일시 */
	TEST_CNT NUMBER(8), /* 테스트건수 */
	EXCEPTION_CNT NUMBER(8), /* 익셉션건수 */
	OCCR_EXCEPTION_CNT NUMBER(8), /* 발생익셉션건수 */
	ROOT_TEST_CNT NUMBER(8), /* 루트테스트건수 */
	ROOT_EXCEPTION_CNT NUMBER(8), /* 루트익셉션건수 */
	ROOT_OCCR_EXCEPTION_CNT NUMBER(8), /* 루트발생익셉션건수 */
	TOT_ELAPSED_MILLIS NUMBER(20), /* 총 경과시간 밀리초 */
	MIN_ELAPSED_MILLIS NUMBER(20), /* 최소 경과시간 밀리초 */
	MAX_ELAPSED_MILLIS NUMBER(20), /* 최대 경과시간 밀리초 */
	PAST_MAX_BRANCH_CNT NUMBER(8), /* 과거최대 브랜치건수 */
	PAST_MAX_EXEC_BRANCH_CNT NUMBER(8), /* 과거최대 실행브랜치건수 */
	PAST_MAX_LINE_CNT NUMBER(8), /* 과거최대 라인건수 */
	PAST_MAX_EXEC_LINE_CNT NUMBER(8), /* 과거최대 실행라인건수 */
	PAST_MAX_CALLER_CNT NUMBER(8), /* 과거최대 호출자건수 */
	PAST_MAX_EXEC_CALLER_CNT NUMBER(8), /* 과거최대 실행호출자건수 */
	PAST_MAX_CALLEE_CNT NUMBER(8), /* 과거최대 피호출자건수 */
	PAST_MAX_EXEC_CALLEE_CNT NUMBER(8), /* 과거최대 실행피호출자건수 */
	ALL_FRST_TEST_DTTM VARCHAR2(23), /* 전체최초테스트일시 */
	ALL_LAST_TEST_DTTM VARCHAR2(23), /* 전체최종테스트일시 */
	ALL_TEST_CNT NUMBER(8), /* 전체테스트건수 */
	ALL_EXCEPTION_CNT NUMBER(8), /* 전체익셉션건수 */
	ALL_OCCR_EXCEPTION_CNT NUMBER(8), /* 전체발생익셉션건수 */
	ALL_ROOT_TEST_CNT NUMBER(8), /* 전체루트테스트건수 */
	ALL_ROOT_EXCEPTION_CNT NUMBER(8), /* 전체루트익셉션건수 */
	ALL_ROOT_OCCR_EXCEPTION_CNT NUMBER(8), /* 전체루트발생익셉션건수 */
	ALL_TOT_ELAPSED_MILLIS NUMBER(20), /* 전체 총 경과시간 밀리초 */
	ALL_MIN_ELAPSED_MILLIS NUMBER(20), /* 전체 최소 경과시간 밀리초 */
	ALL_MAX_ELAPSED_MILLIS NUMBER(20), /* 전체 최대 경과시간 밀리초 */
	USER_ID VARCHAR2(32), /* 사용자 ID */
	USER_NM VARCHAR2(100), /* 사용자 명 */
	DEPT_ID VARCHAR2(32), /* 부서 ID */
	DEPT_NM VARCHAR2(100), /* 부서 명 */
	CLASS_KOR_NM VARCHAR2(1000), /* 클래스 한글 명 */
	MANGMT_LV_CD_NM VARCHAR2(100) /* 관리레벨코드명 */
)PARTITION BY RANGE ( PROC_BASE_DATE ) 
(
  PARTITION BXT_STAT_ACCUM_METHOD_HST_2016 VALUES LESS THAN ('20169999')
,  PARTITION BXT_STAT_ACCUM_METHOD_HST_2017 VALUES LESS THAN ('20179999')
,  PARTITION BXT_STAT_ACCUM_METHOD_HST_2018 VALUES LESS THAN ('20189999')
,  PARTITION BXT_STAT_ACCUM_METHOD_HST_2019 VALUES LESS THAN ('20199999')
,  PARTITION BXT_STAT_ACCUM_METHOD_HST_2020 VALUES LESS THAN ('20209999')
);

COMMENT ON TABLE BXT_STAT_ACCUM_METHOD_HST IS '2차통계-메소드 현황 일별내역';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PROC_KEY IS '처리키';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PROC_BASE_DATE IS '처리기준일자';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.DEL_YN IS '삭제 여부';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.METHOD_SG IS '메소드 시그니처';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.METHOD_RET_DC IS '메소드리턴디스크립터';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PACKAGE_NM IS '패키지 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.CLASS_NM IS '클래스 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.METHOD_NM IS '메소드 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.BRANCH_CNT IS '브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.EXEC_BRANCH_CNT IS '실행브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.LINE_CNT IS '라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.EXEC_LINE_CNT IS '실행라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.CALLER_CNT IS '호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.EXEC_CALLER_CNT IS '실행호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.CALLEE_CNT IS '피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.EXEC_CALLEE_CNT IS '실행피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.FRST_TEST_DTTM IS '최초테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.LAST_TEST_DTTM IS '최종테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.TEST_CNT IS '테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.EXCEPTION_CNT IS '익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.OCCR_EXCEPTION_CNT IS '발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ROOT_TEST_CNT IS '루트테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ROOT_EXCEPTION_CNT IS '루트익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ROOT_OCCR_EXCEPTION_CNT IS '루트발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.TOT_ELAPSED_MILLIS IS '총 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.MIN_ELAPSED_MILLIS IS '최소 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.MAX_ELAPSED_MILLIS IS '최대 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_BRANCH_CNT IS '과거최대 브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_EXEC_BRANCH_CNT IS '과거최대 실행브랜치건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_LINE_CNT IS '과거최대 라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_EXEC_LINE_CNT IS '과거최대 실행라인건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_CALLER_CNT IS '과거최대 호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_EXEC_CALLER_CNT IS '과거최대 실행호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_CALLEE_CNT IS '과거최대 피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.PAST_MAX_EXEC_CALLEE_CNT IS '과거최대 실행피호출자건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_FRST_TEST_DTTM IS '전체최초테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_LAST_TEST_DTTM IS '전체최종테스트일시';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_TEST_CNT IS '전체테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_EXCEPTION_CNT IS '전체익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_OCCR_EXCEPTION_CNT IS '전체발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_ROOT_TEST_CNT IS '전체루트테스트건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_ROOT_EXCEPTION_CNT IS '전체루트익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_ROOT_OCCR_EXCEPTION_CNT IS '전체루트발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_TOT_ELAPSED_MILLIS IS '전체 총 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_MIN_ELAPSED_MILLIS IS '전체 최소 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.ALL_MAX_ELAPSED_MILLIS IS '전체 최대 경과시간 밀리초';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.USER_ID IS '사용자 ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.USER_NM IS '사용자 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.DEPT_ID IS '부서 ID';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.DEPT_NM IS '부서 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.CLASS_KOR_NM IS '클래스 한글 명';

COMMENT ON COLUMN BXT_STAT_ACCUM_METHOD_HST.MANGMT_LV_CD_NM IS '관리레벨코드명';

CREATE UNIQUE INDEX PK_BXT_STAT_ACCUM_METHOD_HST
	ON BXT_STAT_ACCUM_METHOD_HST (
		SYS_ID ASC,
		PROC_KEY ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		PROC_BASE_DATE ASC
	);

CREATE INDEX IX_BXT_STAT_ACCUM_MTHD_HST_01
	ON BXT_STAT_ACCUM_METHOD_HST (
		CLASS_QN ASC
	);

CREATE INDEX IX_BXT_STAT_ACCUM_MTHD_HST_02
	ON BXT_STAT_ACCUM_METHOD_HST (
		PACKAGE_NM ASC
	);

ALTER TABLE BXT_STAT_ACCUM_METHOD_HST
	ADD
		CONSTRAINT PK_BXT_STAT_ACCUM_METHOD_HST
		PRIMARY KEY (
			SYS_ID,
			PROC_KEY,
			CLASS_ID,
			METHOD_ID,
			PROC_BASE_DATE
		);

/* 분석-Inspection 결과 */
CREATE TABLE BXT_INSP_RESULT (
	BUG_UID VARCHAR2(32) NOT NULL, /* 버그 UID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스 ID */
	CLASS_QN VARCHAR2(1000) NOT NULL, /* 클래스 퀄리파이드네임 */
	RULE_ID VARCHAR2(128) NOT NULL, /* 규칙ID */
	BEGIN_LINE_NO NUMBER(8) NOT NULL, /* 시작라인번호 */
	LAST_LINE_NO NUMBER(8), /* 마지막라인번호 */
	RULE_DETL_DESC VARCHAR2(2000) NOT NULL, /* 규칙 상세 설명 */
	CNFD_CD VARCHAR2(1) /* 신뢰도 코드  */
);

COMMENT ON TABLE BXT_INSP_RESULT IS '분석-Inspection 결과';

COMMENT ON COLUMN BXT_INSP_RESULT.BUG_UID IS '버그 UID';

COMMENT ON COLUMN BXT_INSP_RESULT.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_INSP_RESULT.CLASS_ID IS '클래스 ID';

COMMENT ON COLUMN BXT_INSP_RESULT.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_INSP_RESULT.RULE_ID IS '규칙ID';

COMMENT ON COLUMN BXT_INSP_RESULT.BEGIN_LINE_NO IS '시작라인번호';

COMMENT ON COLUMN BXT_INSP_RESULT.LAST_LINE_NO IS '마지막라인번호';

COMMENT ON COLUMN BXT_INSP_RESULT.RULE_DETL_DESC IS '규칙 상세 설명';

COMMENT ON COLUMN BXT_INSP_RESULT.CNFD_CD IS '신뢰도 코드 ';

CREATE UNIQUE INDEX PK_BXT_INSP_RESULT
	ON BXT_INSP_RESULT (
		BUG_UID ASC
	);

CREATE INDEX IX_BXT_INSP_RESULT
	ON BXT_INSP_RESULT (
		CLASS_QN ASC,
		RULE_ID ASC
	);

ALTER TABLE BXT_INSP_RESULT
	ADD
		CONSTRAINT PK_BXT_INSP_RESULT
		PRIMARY KEY (
			BUG_UID
		);

/* 분석-Inspection 규칙정보 */
CREATE TABLE BXT_INSP_RULE (
	RULE_ID VARCHAR2(128) NOT NULL, /* 규칙ID */
	RULE_CATEGORY_NM VARCHAR2(100), /* 규칙 유형 명 */
	RULE_RANK_CD VARCHAR2(1), /* 규칙 등급 코드 */
	SMMY_DESC VARCHAR2(2000), /* 요약 설명 */
	DETL_MSG_UID VARCHAR2(32), /* 상세 메시지 UID */
	EXEC_MSG_UID VARCHAR2(32), /* 실행 메시지 UID */
	BAD_EXAMPLE_SRC VARCHAR2(4000), /* 수정전 사례 소스 */
	GOOD_EXAMPLE_SRC VARCHAR2(4000), /* 수정후 사례 소스 */
	BAD_BEGIN_LINE_NO NUMBER(8), /* 수정전 시작라인번호 */
	BAD_LAST_LINE_NO NUMBER(8), /* 수정전 마지막라인번호 */
	GOOD_BEGIN_LINE_NO NUMBER(8), /* 수정후 시작라인번호 */
	GOOD_LAST_LINE_NO NUMBER(8), /* 수정후 마지막라인번호 */
	DEL_YN VARCHAR2(1) /* 삭제 여부 */
);

COMMENT ON TABLE BXT_INSP_RULE IS '분석-Inspection 규칙정보';

COMMENT ON COLUMN BXT_INSP_RULE.RULE_ID IS '규칙ID';

COMMENT ON COLUMN BXT_INSP_RULE.RULE_CATEGORY_NM IS '규칙 유형 명';

COMMENT ON COLUMN BXT_INSP_RULE.RULE_RANK_CD IS '규칙 등급 코드';

COMMENT ON COLUMN BXT_INSP_RULE.SMMY_DESC IS '요약 설명';

COMMENT ON COLUMN BXT_INSP_RULE.DETL_MSG_UID IS '상세 메시지 UID';

COMMENT ON COLUMN BXT_INSP_RULE.EXEC_MSG_UID IS '실행 메시지 UID';

COMMENT ON COLUMN BXT_INSP_RULE.BAD_EXAMPLE_SRC IS '수정전 사례 소스';

COMMENT ON COLUMN BXT_INSP_RULE.GOOD_EXAMPLE_SRC IS '수정후 사례 소스';

COMMENT ON COLUMN BXT_INSP_RULE.BAD_BEGIN_LINE_NO IS '수정전 시작라인번호';

COMMENT ON COLUMN BXT_INSP_RULE.BAD_LAST_LINE_NO IS '수정전 마지막라인번호';

COMMENT ON COLUMN BXT_INSP_RULE.GOOD_BEGIN_LINE_NO IS '수정후 시작라인번호';

COMMENT ON COLUMN BXT_INSP_RULE.GOOD_LAST_LINE_NO IS '수정후 마지막라인번호';

COMMENT ON COLUMN BXT_INSP_RULE.DEL_YN IS '삭제 여부';

CREATE UNIQUE INDEX PK_BXT_INSP_RULE
	ON BXT_INSP_RULE (
		RULE_ID ASC
	);

ALTER TABLE BXT_INSP_RULE
	ADD
		CONSTRAINT PK_BXT_INSP_RULE
		PRIMARY KEY (
			RULE_ID
		);

/* 분석-메소드 라인정보 */
CREATE TABLE BXT_METHOD_LINE (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	SEQ NUMBER(8) NOT NULL, /* 일련번호 */
	LINE_DATA VARCHAR2(4000) /* 라인 데이터 */
);

COMMENT ON TABLE BXT_METHOD_LINE IS '분석-메소드 라인정보';

COMMENT ON COLUMN BXT_METHOD_LINE.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_METHOD_LINE.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_METHOD_LINE.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_METHOD_LINE.SEQ IS '일련번호';

COMMENT ON COLUMN BXT_METHOD_LINE.LINE_DATA IS '라인 데이터';

CREATE UNIQUE INDEX PK_BXT_METHOD_LINE
	ON BXT_METHOD_LINE (
		SYS_ID ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		SEQ ASC
	);

ALTER TABLE BXT_METHOD_LINE
	ADD
		CONSTRAINT PK_BXT_METHOD_LINE
		PRIMARY KEY (
			SYS_ID,
			CLASS_ID,
			METHOD_ID,
			SEQ
		);

/* 분석-메소드 의존성 정보 */
CREATE TABLE BXT_METHOD_DEPD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	CALLEE_CLASS_ID VARCHAR2(64) NOT NULL, /* 피호출자 클래스ID */
	CALLEE_METHOD_ID VARCHAR2(32) NOT NULL, /* 피호출자 메소드ID */
	LINE_NO NUMBER(8) NOT NULL /* 라인번호 */
);

COMMENT ON TABLE BXT_METHOD_DEPD IS '분석-메소드 의존성 정보';

COMMENT ON COLUMN BXT_METHOD_DEPD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_METHOD_DEPD.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_METHOD_DEPD.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_METHOD_DEPD.CALLEE_CLASS_ID IS '피호출자 클래스ID';

COMMENT ON COLUMN BXT_METHOD_DEPD.CALLEE_METHOD_ID IS '피호출자 메소드ID';

COMMENT ON COLUMN BXT_METHOD_DEPD.LINE_NO IS '라인번호';

CREATE UNIQUE INDEX PK_BXT_METHOD_DEPD
	ON BXT_METHOD_DEPD (
		SYS_ID ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		CALLEE_CLASS_ID ASC,
		CALLEE_METHOD_ID ASC,
		LINE_NO ASC
	);

ALTER TABLE BXT_METHOD_DEPD
	ADD
		CONSTRAINT PK_BXT_METHOD_DEPD
		PRIMARY KEY (
			SYS_ID,
			CLASS_ID,
			METHOD_ID,
			CALLEE_CLASS_ID,
			CALLEE_METHOD_ID,
			LINE_NO
		);

/* 분석-메소드 정보 */
CREATE TABLE BXT_METHOD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	CLASS_QN VARCHAR2(1000) NOT NULL, /* 클래스 퀄리파이드네임 */
	METHOD_SG VARCHAR2(1000) NOT NULL, /* 메소드 시그니쳐 */
	METHOD_RET_DC VARCHAR2(1000) NOT NULL, /* 메소드리턴디스크립터 */
	METHOD_BEGIN_LINE_NO NUMBER(8), /* 메소드 시작 라인 번호 */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드 버전 해쉬ID */
	LINE_HASH_ID VARCHAR2(128), /* 라인해쉬ID */
	METHOD_DEPD_HASH_ID VARCHAR2(128), /* 메소드의존성해쉬ID */
	DEL_YN VARCHAR2(1), /* 삭제여부 */
	AGENT_GRP_ID VARCHAR2(32), /* AGENT 그룹 ID */
	UPDT_DTTM VARCHAR2(23), /* 변경일시 */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_METHOD IS '분석-메소드 정보';

COMMENT ON COLUMN BXT_METHOD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_METHOD.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_METHOD.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_METHOD.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_METHOD.METHOD_SG IS '메소드 시그니쳐';

COMMENT ON COLUMN BXT_METHOD.METHOD_RET_DC IS '메소드리턴디스크립터';

COMMENT ON COLUMN BXT_METHOD.METHOD_BEGIN_LINE_NO IS '메소드 시작 라인 번호';

COMMENT ON COLUMN BXT_METHOD.METHOD_VER_HASH_ID IS '메소드 버전 해쉬ID';

COMMENT ON COLUMN BXT_METHOD.LINE_HASH_ID IS '라인해쉬ID';

COMMENT ON COLUMN BXT_METHOD.METHOD_DEPD_HASH_ID IS '메소드의존성해쉬ID';

COMMENT ON COLUMN BXT_METHOD.DEL_YN IS '삭제여부';

COMMENT ON COLUMN BXT_METHOD.AGENT_GRP_ID IS 'AGENT 그룹 ID';

COMMENT ON COLUMN BXT_METHOD.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_METHOD.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_METHOD
	ON BXT_METHOD (
		SYS_ID ASC,
		CLASS_ID ASC,
		METHOD_ID ASC
	);

CREATE UNIQUE INDEX IX_BXT_UID_METHOD_01
	ON BXT_METHOD (
		SYS_ID ASC,
		CLASS_QN ASC,
		METHOD_SG ASC
	);

ALTER TABLE BXT_METHOD
	ADD
		CONSTRAINT PK_BXT_METHOD
		PRIMARY KEY (
			SYS_ID,
			CLASS_ID,
			METHOD_ID
		);

ALTER TABLE BXT_METHOD
	ADD
		CONSTRAINT UK_BXT_METHOD
		UNIQUE (
			SYS_ID,
			CLASS_QN,
			METHOD_SG
		);

/* 분석-클래스 정보 */
CREATE TABLE BXT_CLASS (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	CLASS_QN VARCHAR2(1000) NOT NULL, /* 클래스 퀄리파이드네임 */
	CLASS_KOR_NM VARCHAR2(1000), /* 클래스 한글 명 */
	MANGMT_LV_CD_NM VARCHAR2(100), /* 관리레벨코드명 */
	USER_ID VARCHAR2(32), /* 사용자ID */
	USER_REG_TYPE_CD VARCHAR2(1), /* 사용자 등록 타입 코드 */
	REPO_UID VARCHAR2(32), /* 저장소 UID */
	FILE_UPDT_DTTM VARCHAR2(23), /* 파일변경일시 */
	FILE_NM VARCHAR2(1024), /* 파일명 */
	FILE_SIZE NUMBER(8), /* 파일사이즈 */
	AGENT_GRP_ID VARCHAR2(32), /* AGENT 그룹 ID */
	INSP_UPDT_DTTM VARCHAR2(23), /* INSPECTION변경일시 */
	UPDT_DTTM VARCHAR2(23), /* 변경일시 */
	REG_DTTM VARCHAR2(23), /* 등록일시 */
	TRSF_DATE VARCHAR2(8) /* 이관일자 */
);

COMMENT ON TABLE BXT_CLASS IS '분석-클래스 정보';

COMMENT ON COLUMN BXT_CLASS.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_CLASS.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_CLASS.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_CLASS.CLASS_KOR_NM IS '클래스 한글 명';

COMMENT ON COLUMN BXT_CLASS.MANGMT_LV_CD_NM IS '관리레벨코드명';

COMMENT ON COLUMN BXT_CLASS.USER_ID IS '사용자ID';

COMMENT ON COLUMN BXT_CLASS.USER_REG_TYPE_CD IS '사용자 등록 타입 코드';

COMMENT ON COLUMN BXT_CLASS.REPO_UID IS '저장소 UID';

COMMENT ON COLUMN BXT_CLASS.FILE_UPDT_DTTM IS '파일변경일시';

COMMENT ON COLUMN BXT_CLASS.FILE_NM IS '파일명';

COMMENT ON COLUMN BXT_CLASS.FILE_SIZE IS '파일사이즈';

COMMENT ON COLUMN BXT_CLASS.AGENT_GRP_ID IS 'AGENT 그룹 ID';

COMMENT ON COLUMN BXT_CLASS.INSP_UPDT_DTTM IS 'INSPECTION변경일시';

COMMENT ON COLUMN BXT_CLASS.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_CLASS.REG_DTTM IS '등록일시';

COMMENT ON COLUMN BXT_CLASS.TRSF_DATE IS '이관일자';

CREATE UNIQUE INDEX PK_BXT_CLASS
	ON BXT_CLASS (
		SYS_ID ASC,
		CLASS_ID ASC
	);

CREATE UNIQUE INDEX UIX_BXT_CLASS
	ON BXT_CLASS (
		SYS_ID ASC,
		CLASS_QN ASC
	);

ALTER TABLE BXT_CLASS
	ADD
		CONSTRAINT PK_BXT_CLASS
		PRIMARY KEY (
			SYS_ID,
			CLASS_ID
		);

ALTER TABLE BXT_CLASS
	ADD
		CONSTRAINT UK_BXT_CLASS
		UNIQUE (
			SYS_ID,
			CLASS_QN
		);

/* 시스템설정-AGENT 목록 */
CREATE TABLE BXT_AGENT (
	AGENT_ID VARCHAR2(32) NOT NULL, /* AGENT ID */
	AGENT_CD VARCHAR2(1), /* AGENT 코드 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	AGENT_GRP_ID VARCHAR2(32), /* AGENT 그룹 ID */
	AGENT_STATUS_CD VARCHAR2(1), /* AGENT 상태코드 */
	ERR_MSG VARCHAR2(4000), /* 에러메시지 */
	UPDT_DTTM VARCHAR2(23) NOT NULL, /* 변경일시 */
	HOST_IP VARCHAR2(50), /* HOST IP */
	PROC_ID VARCHAR2(16) /* 프로세스ID */
);

COMMENT ON TABLE BXT_AGENT IS '시스템설정-AGENT 목록';

COMMENT ON COLUMN BXT_AGENT.AGENT_ID IS 'AGENT ID';

COMMENT ON COLUMN BXT_AGENT.AGENT_CD IS 'AGENT 코드';

COMMENT ON COLUMN BXT_AGENT.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_AGENT.AGENT_GRP_ID IS 'AGENT 그룹 ID';

COMMENT ON COLUMN BXT_AGENT.AGENT_STATUS_CD IS 'AGENT 상태코드';

COMMENT ON COLUMN BXT_AGENT.ERR_MSG IS '에러메시지';

COMMENT ON COLUMN BXT_AGENT.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_AGENT.HOST_IP IS 'HOST IP';

COMMENT ON COLUMN BXT_AGENT.PROC_ID IS '프로세스ID';

CREATE UNIQUE INDEX PK_BXT_AGENT
	ON BXT_AGENT (
		AGENT_ID ASC
	);

ALTER TABLE BXT_AGENT
	ADD
		CONSTRAINT PK_BXT_AGENT
		PRIMARY KEY (
			AGENT_ID
		);

/* 시스템설정-AGENT 상태 이력 */
CREATE TABLE BXT_AGENT_STATUS_HST (
	AGENT_ID VARCHAR2(32) NOT NULL, /* AGENT ID */
	UPDT_DTTM VARCHAR2(23) NOT NULL, /* 변경일시 */
	AGENT_CD VARCHAR2(1), /* AGENT 코드 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	AGENT_GRP_ID VARCHAR2(32), /* AGENT 그룹 ID */
	AGENT_STATUS_CD VARCHAR2(1), /* AGENT 상태코드 */
	ERR_MSG VARCHAR2(4000), /* 에러메시지 */
	HOST_IP VARCHAR2(50), /* HOST IP */
	PROC_ID VARCHAR2(16) /* 프로세스ID */
);

COMMENT ON TABLE BXT_AGENT_STATUS_HST IS '시스템설정-AGENT 상태 이력';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.AGENT_ID IS 'AGENT ID';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.AGENT_CD IS 'AGENT 코드';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.AGENT_GRP_ID IS 'AGENT 그룹 ID';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.AGENT_STATUS_CD IS 'AGENT 상태코드';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.ERR_MSG IS '에러메시지';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.HOST_IP IS 'HOST IP';

COMMENT ON COLUMN BXT_AGENT_STATUS_HST.PROC_ID IS '프로세스ID';

CREATE UNIQUE INDEX PK_BXT_AGENT_STATUS_HST
	ON BXT_AGENT_STATUS_HST (
		AGENT_ID ASC,
		UPDT_DTTM ASC
	);

ALTER TABLE BXT_AGENT_STATUS_HST
	ADD
		CONSTRAINT PK_BXT_AGENT_STATUS_HST
		PRIMARY KEY (
			AGENT_ID,
			UPDT_DTTM
		);

/* 시스템설정-AGENT 처리 이력 */
CREATE TABLE BXT_AGENT_PROC_HST (
	AGENT_GRP_ID VARCHAR2(32) NOT NULL, /* AGENT 그룹 ID */
	PROC_BEGIN_DTTM VARCHAR2(23) NOT NULL, /* 처리시작일시 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ALL_CNT NUMBER(8), /* 클래스 전체 건수 */
	CLASS_NEW_CNT NUMBER(8), /* 클래스 신규 건수 */
	CLASS_DEL_CNT NUMBER(8), /* 클래스 삭제 건수 */
	CLASS_UPDT_CNT NUMBER(8), /* 클래스 변경 건수 */
	METHOD_ALL_CNT NUMBER(8), /* 메소드 전체 건수 */
	METHOD_NEW_CNT NUMBER(8), /* 메소드 신규 건수 */
	METHOD_DEL_CNT NUMBER(8), /* 메소드 삭제 건수 */
	METHOD_UPDT_CNT NUMBER(8), /* 메소드 변경 건수 */
	METHOD_VER_UPDT_CNT NUMBER(8), /* 메소드 버전 변경 건수 */
	PROC_END_DTTM VARCHAR2(23), /* 처리종료일시 */
	AGENT_ID VARCHAR2(32), /* AGENT ID */
	HOST_IP VARCHAR2(50), /* HOST IP */
	PROC_ID VARCHAR2(16) /* 프로세스 ID */
);

COMMENT ON TABLE BXT_AGENT_PROC_HST IS '시스템설정-AGENT 처리 이력';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.AGENT_GRP_ID IS 'AGENT 그룹 ID';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.PROC_BEGIN_DTTM IS '처리시작일시';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.CLASS_ALL_CNT IS '클래스 전체 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.CLASS_NEW_CNT IS '클래스 신규 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.CLASS_DEL_CNT IS '클래스 삭제 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.CLASS_UPDT_CNT IS '클래스 변경 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.METHOD_ALL_CNT IS '메소드 전체 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.METHOD_NEW_CNT IS '메소드 신규 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.METHOD_DEL_CNT IS '메소드 삭제 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.METHOD_UPDT_CNT IS '메소드 변경 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.METHOD_VER_UPDT_CNT IS '메소드 버전 변경 건수';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.PROC_END_DTTM IS '처리종료일시';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.AGENT_ID IS 'AGENT ID';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.HOST_IP IS 'HOST IP';

COMMENT ON COLUMN BXT_AGENT_PROC_HST.PROC_ID IS '프로세스 ID';

CREATE UNIQUE INDEX PK_BXT_AGENT_PROC_HST
	ON BXT_AGENT_PROC_HST (
		AGENT_GRP_ID ASC,
		PROC_BEGIN_DTTM ASC
	);

ALTER TABLE BXT_AGENT_PROC_HST
	ADD
		CONSTRAINT PK_BXT_AGENT_PROC_HST
		PRIMARY KEY (
			AGENT_GRP_ID,
			PROC_BEGIN_DTTM
		);

/* 시스템설정-CONTEXT 정보 */
CREATE TABLE BXT_CTX (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	OBJECT_SEQ NUMBER(8) NOT NULL, /* 오브젝트 순번 */
	CLASS_QN VARCHAR2(1000), /* 클래스 퀄리파이드네임 */
	OBJECT_CD_NM VARCHAR2(100), /* 오브젝트 코드 명 */
	OBJECT_CD_DESC VARCHAR2(2000), /* 오브젝트 코드 설명 */
	OBJECT_GET_API VARCHAR2(1000), /* 오브젝트 GET API */
	RET_CLASS_QN VARCHAR2(1000), /* 리턴 클래스 퀄리파이드네임 */
	RET_CLASS_TYPE_CD VARCHAR2(1), /* 리턴 클래스 타입코드 */
	TYPE_CAST_CLASS_QN VARCHAR2(1000), /* 타입 형변환 클래스 퀄리파이드네임 */
	RCD_YN VARCHAR2(1) /* 레코딩 여부 */
);

COMMENT ON TABLE BXT_CTX IS '시스템설정-CONTEXT 정보';

COMMENT ON COLUMN BXT_CTX.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_CTX.OBJECT_SEQ IS '오브젝트 순번';

COMMENT ON COLUMN BXT_CTX.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_CTX.OBJECT_CD_NM IS '오브젝트 코드 명';

COMMENT ON COLUMN BXT_CTX.OBJECT_CD_DESC IS '오브젝트 코드 설명';

COMMENT ON COLUMN BXT_CTX.OBJECT_GET_API IS '오브젝트 GET API';

COMMENT ON COLUMN BXT_CTX.RET_CLASS_QN IS '리턴 클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_CTX.RET_CLASS_TYPE_CD IS '리턴 클래스 타입코드';

COMMENT ON COLUMN BXT_CTX.TYPE_CAST_CLASS_QN IS '타입 형변환 클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_CTX.RCD_YN IS '레코딩 여부';

CREATE UNIQUE INDEX PK_BXT_CTX
	ON BXT_CTX (
		SYS_ID ASC,
		OBJECT_SEQ ASC
	);

ALTER TABLE BXT_CTX
	ADD
		CONSTRAINT PK_BXT_CTX
		PRIMARY KEY (
			SYS_ID,
			OBJECT_SEQ
		);

/* 시스템설정-CONTEXT 필드 */
CREATE TABLE BXT_CTX_FIELD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	OBJECT_SEQ NUMBER(8) NOT NULL, /* 오브젝트 순번 */
	FIELD_NM VARCHAR2(100) NOT NULL, /* 필드 명 */
	FIELD_TYPE VARCHAR2(1000) NOT NULL, /* 필드 타입 */
	RCD_YN VARCHAR2(1), /* 레코딩 여부 */
	DB_FIELD_NM VARCHAR2(32), /* DB 필드 명 */
	SEARCH_USE_YN VARCHAR2(1), /* 검색 사용 여부 */
	UI_FIELD_KOR_NM VARCHAR2(100), /* 화면 필드 한글 명 */
	UI_FIELD_EXPR_CD VARCHAR2(1), /* 화면 필드 표현 코드 */
	DATA_FORMAT VARCHAR2(50) /* 데이터 포맷 */
);

COMMENT ON TABLE BXT_CTX_FIELD IS '시스템설정-CONTEXT 필드';

COMMENT ON COLUMN BXT_CTX_FIELD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_CTX_FIELD.OBJECT_SEQ IS '오브젝트 순번';

COMMENT ON COLUMN BXT_CTX_FIELD.FIELD_NM IS '필드 명';

COMMENT ON COLUMN BXT_CTX_FIELD.FIELD_TYPE IS '필드 타입';

COMMENT ON COLUMN BXT_CTX_FIELD.RCD_YN IS '레코딩 여부';

COMMENT ON COLUMN BXT_CTX_FIELD.DB_FIELD_NM IS 'DB 필드 명';

COMMENT ON COLUMN BXT_CTX_FIELD.SEARCH_USE_YN IS '검색 사용 여부';

COMMENT ON COLUMN BXT_CTX_FIELD.UI_FIELD_KOR_NM IS '화면 필드 한글 명';

COMMENT ON COLUMN BXT_CTX_FIELD.UI_FIELD_EXPR_CD IS '화면 필드 표현 코드';

COMMENT ON COLUMN BXT_CTX_FIELD.DATA_FORMAT IS '데이터 포맷';

CREATE UNIQUE INDEX PK_BXT_CTX_FIELD
	ON BXT_CTX_FIELD (
		SYS_ID ASC,
		OBJECT_SEQ ASC,
		FIELD_NM ASC
	);

CREATE UNIQUE INDEX IX_BXT_CUSTOM_FIELD_01
	ON BXT_CTX_FIELD (
		SYS_ID ASC,
		DB_FIELD_NM ASC
	);

ALTER TABLE BXT_CTX_FIELD
	ADD
		CONSTRAINT PK_BXT_CTX_FIELD
		PRIMARY KEY (
			SYS_ID,
			OBJECT_SEQ,
			FIELD_NM
		);

ALTER TABLE BXT_CTX_FIELD
	ADD
		CONSTRAINT UK_BXT_CTX_FIELD
		UNIQUE (
			SYS_ID,
			DB_FIELD_NM
		);

/* 시스템설정-CONTEXT 필드 유효값 목록 */
CREATE TABLE BXT_CTX_FIELD_VALUE (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	OBJECT_SEQ NUMBER(8) NOT NULL, /* 오브젝트 순번 */
	FIELD_NM VARCHAR2(100) NOT NULL, /* 필드 명 */
	FIELD_VAL VARCHAR2(50) NOT NULL, /* 필드 값 */
	FIELD_VAL_NM VARCHAR2(100) /* 필드 값 명 */
);

COMMENT ON TABLE BXT_CTX_FIELD_VALUE IS '시스템설정-CONTEXT 필드 유효값 목록';

COMMENT ON COLUMN BXT_CTX_FIELD_VALUE.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_CTX_FIELD_VALUE.OBJECT_SEQ IS '오브젝트 순번';

COMMENT ON COLUMN BXT_CTX_FIELD_VALUE.FIELD_NM IS '필드 명';

COMMENT ON COLUMN BXT_CTX_FIELD_VALUE.FIELD_VAL IS '필드 값';

COMMENT ON COLUMN BXT_CTX_FIELD_VALUE.FIELD_VAL_NM IS '필드 값 명';

CREATE UNIQUE INDEX PK_BXT_CTX_FIELD_VALUE
	ON BXT_CTX_FIELD_VALUE (
		SYS_ID ASC,
		OBJECT_SEQ ASC,
		FIELD_NM ASC,
		FIELD_VAL ASC
	);

ALTER TABLE BXT_CTX_FIELD_VALUE
	ADD
		CONSTRAINT PK_BXT_CTX_FIELD_VALUE
		PRIMARY KEY (
			SYS_ID,
			OBJECT_SEQ,
			FIELD_NM,
			FIELD_VAL
		);

/* 시스템설정-공통 코드 */
CREATE TABLE BXT_COM_CD (
	CD_CATEGORY VARCHAR2(100) NOT NULL, /* 코드 유형 */
	CD_NM VARCHAR2(100) NOT NULL, /* 코드 명 */
	CD_CATEGORY_DESC VARCHAR2(2000), /* 코드유형설명 */
	CD_DESC VARCHAR2(2000), /* 코드 설명 */
	DEL_YN VARCHAR2(1) NOT NULL, /* 삭제 여부 */
	SORT_SEQ NUMBER(8), /* 정렬 순번 */
	UPDT_DTTM VARCHAR2(23) /* 변경 일시 */
);

COMMENT ON TABLE BXT_COM_CD IS '시스템설정-공통 코드';

COMMENT ON COLUMN BXT_COM_CD.CD_CATEGORY IS '코드 유형';

COMMENT ON COLUMN BXT_COM_CD.CD_NM IS '코드 명';

COMMENT ON COLUMN BXT_COM_CD.CD_CATEGORY_DESC IS '코드유형설명';

COMMENT ON COLUMN BXT_COM_CD.CD_DESC IS '코드 설명';

COMMENT ON COLUMN BXT_COM_CD.DEL_YN IS '삭제 여부';

COMMENT ON COLUMN BXT_COM_CD.SORT_SEQ IS '정렬 순번';

COMMENT ON COLUMN BXT_COM_CD.UPDT_DTTM IS '변경 일시';

CREATE UNIQUE INDEX PK_BXT_COM_CD
	ON BXT_COM_CD (
		CD_CATEGORY ASC,
		CD_NM ASC
	);

ALTER TABLE BXT_COM_CD
	ADD
		CONSTRAINT PK_BXT_COM_CD
		PRIMARY KEY (
			CD_CATEGORY,
			CD_NM
		);

/* 시스템설정-레코딩 룰 */
CREATE TABLE BXT_RULE (
	RULE_ID VARCHAR2(32) NOT NULL, /* 룰ID */
	RULE_CLCF_CD VARCHAR2(1) NOT NULL, /* 룰구분코드 */
	RULE_TRG_CLCF_CD VARCHAR2(1) NOT NULL, /* 룰대상구분코드 */
	RULE_PROC_CLCF_CD VARCHAR2(1) NOT NULL, /* 룰처리구분코드 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
	RULE_VAL VARCHAR2(2000), /* 룰값 */
	RULE_DESC VARCHAR2(2000), /* 룰설명 */
	DEL_YN VARCHAR2(1) NOT NULL, /* 삭제 여부 */
	CREAT_DTTM VARCHAR2(23), /* 생성일시 */
	CREAT_USER_ID VARCHAR2(32), /* 생성 사용자ID */
	UPDT_DTTM VARCHAR2(23), /* 변경일시 */
	UPDT_USER_ID VARCHAR2(32) /* 변경 사용자ID */
);

COMMENT ON TABLE BXT_RULE IS '시스템설정-레코딩 룰';

COMMENT ON COLUMN BXT_RULE.RULE_ID IS '룰ID';

COMMENT ON COLUMN BXT_RULE.RULE_CLCF_CD IS '룰구분코드';

COMMENT ON COLUMN BXT_RULE.RULE_TRG_CLCF_CD IS '룰대상구분코드';

COMMENT ON COLUMN BXT_RULE.RULE_PROC_CLCF_CD IS '룰처리구분코드';

COMMENT ON COLUMN BXT_RULE.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_RULE.RULE_VAL IS '룰값';

COMMENT ON COLUMN BXT_RULE.RULE_DESC IS '룰설명';

COMMENT ON COLUMN BXT_RULE.DEL_YN IS '삭제 여부';

COMMENT ON COLUMN BXT_RULE.CREAT_DTTM IS '생성일시';

COMMENT ON COLUMN BXT_RULE.CREAT_USER_ID IS '생성 사용자ID';

COMMENT ON COLUMN BXT_RULE.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_RULE.UPDT_USER_ID IS '변경 사용자ID';

CREATE UNIQUE INDEX PK_BXT_RULE
	ON BXT_RULE (
		RULE_ID ASC
	);

ALTER TABLE BXT_RULE
	ADD
		CONSTRAINT PK_BXT_RULE
		PRIMARY KEY (
			RULE_ID
		);

/* 시스템설정-공통 메시지 관리 */
CREATE TABLE BXT_COM_MSG (
	MSG_UID VARCHAR2(32) NOT NULL, /* 메시지 UID */
	MSG_ENG_DESC VARCHAR2(2000), /* 메시지 영문 설명 */
	MSG_KOR_DESC VARCHAR2(2000) /* 메시지 한글 설명 */
);

COMMENT ON TABLE BXT_COM_MSG IS '시스템설정-공통 메시지 관리';

COMMENT ON COLUMN BXT_COM_MSG.MSG_UID IS '메시지 UID';

COMMENT ON COLUMN BXT_COM_MSG.MSG_ENG_DESC IS '메시지 영문 설명';

COMMENT ON COLUMN BXT_COM_MSG.MSG_KOR_DESC IS '메시지 한글 설명';

CREATE UNIQUE INDEX PK_BXT_COM_MSG
	ON BXT_COM_MSG (
		MSG_UID ASC
	);

ALTER TABLE BXT_COM_MSG
	ADD
		CONSTRAINT PK_BXT_COM_MSG
		PRIMARY KEY (
			MSG_UID
		);

/* 시스템설정-소스 저장소 정보 */
CREATE TABLE BXT_SRC_REPO (
	REPO_UID VARCHAR2(32) NOT NULL, /* 저장소 UID */
	REPO_CD VARCHAR2(1) NOT NULL, /* 저장소 코드 */
	REPO_URL VARCHAR2(2000) NOT NULL, /* 저장소 URL */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	REPO_CONN_ID VARCHAR2(32), /* 저장소 접속 ID */
	REPO_CONN_PWD VARCHAR2(50), /* 저장소 접속 비밀번호 */
	PRJCT_CONTNR_NM VARCHAR2(100), /* 프로젝트 컨테이너 명 */
	PRJCT_DEFT_PATH VARCHAR2(100), /* 프로젝트 기본 경로 */
	DB_NM VARCHAR2(100), /* DB명 */
	DB_CONN_INF VARCHAR2(200), /* DB접속정보 */
	REPO_DESC VARCHAR2(2000), /* 저장소 설명 */
	REG_USER_ID VARCHAR2(32), /* 등록 사용자 ID */
	REG_DTTM VARCHAR2(23), /* 등록 일시 */
	DEL_YN VARCHAR2(1) /* 삭제여부 */
);

COMMENT ON TABLE BXT_SRC_REPO IS '시스템설정-소스 저장소 정보';

COMMENT ON COLUMN BXT_SRC_REPO.REPO_UID IS '저장소 UID';

COMMENT ON COLUMN BXT_SRC_REPO.REPO_CD IS '저장소 코드';

COMMENT ON COLUMN BXT_SRC_REPO.REPO_URL IS '저장소 URL';

COMMENT ON COLUMN BXT_SRC_REPO.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_SRC_REPO.REPO_CONN_ID IS '저장소 접속 ID';

COMMENT ON COLUMN BXT_SRC_REPO.REPO_CONN_PWD IS '저장소 접속 비밀번호';

COMMENT ON COLUMN BXT_SRC_REPO.PRJCT_CONTNR_NM IS '프로젝트 컨테이너 명';

COMMENT ON COLUMN BXT_SRC_REPO.PRJCT_DEFT_PATH IS '프로젝트 기본 경로';

COMMENT ON COLUMN BXT_SRC_REPO.DB_NM IS 'DB명';

COMMENT ON COLUMN BXT_SRC_REPO.DB_CONN_INF IS 'DB접속정보';

COMMENT ON COLUMN BXT_SRC_REPO.REPO_DESC IS '저장소 설명';

COMMENT ON COLUMN BXT_SRC_REPO.REG_USER_ID IS '등록 사용자 ID';

COMMENT ON COLUMN BXT_SRC_REPO.REG_DTTM IS '등록 일시';

COMMENT ON COLUMN BXT_SRC_REPO.DEL_YN IS '삭제여부';

CREATE UNIQUE INDEX PK_BXT_SRC_REPO
	ON BXT_SRC_REPO (
		REPO_UID ASC
	);

ALTER TABLE BXT_SRC_REPO
	ADD
		CONSTRAINT PK_BXT_SRC_REPO
		PRIMARY KEY (
			REPO_UID
		);

/* 시스템설정-통계 처리 상태 */
CREATE TABLE BXT_STAT_STATUS (
	PROC_BASE_DATE VARCHAR2(8), /* 처리기준일자 */
	TEST_UNIT_PROC_DTTM VARCHAR2(23), /* 테스트유닛처리일시 */
	PROC_BEGIN_DTTM VARCHAR2(23), /* 처리시작일시 */
	PROC_END_DTTM VARCHAR2(23) /* 처리종료일시 */
);

COMMENT ON TABLE BXT_STAT_STATUS IS '시스템설정-통계 처리 상태';

COMMENT ON COLUMN BXT_STAT_STATUS.PROC_BASE_DATE IS '처리기준일자';

COMMENT ON COLUMN BXT_STAT_STATUS.TEST_UNIT_PROC_DTTM IS '테스트유닛처리일시';

COMMENT ON COLUMN BXT_STAT_STATUS.PROC_BEGIN_DTTM IS '처리시작일시';

COMMENT ON COLUMN BXT_STAT_STATUS.PROC_END_DTTM IS '처리종료일시';

/* 시스템설정-통계 처리 이력 */
CREATE TABLE BXT_STAT_PROC_HST (
	PROC_BEGIN_DTTM VARCHAR2(23) NOT NULL, /* 처리시작일시 */
	PROC_BASE_DATE VARCHAR2(8), /* 처리기준일자 */
	TEST_UNIT_PROC_DTTM VARCHAR2(23), /* 테스트유닛처리일시 */
	PROC_END_DTTM VARCHAR2(23), /* 처리종료일시 */
	METHOD_UPDT_CNT NUMBER(8), /* 메소드 변경 건수 */
	TEST_UNIT_PROC_CNT NUMBER(8), /* 테스트유닛처리건수 */
	PROC_BASE_DATE_UPDT_YN VARCHAR2(1) /* 처리기준일자변경여부 */
);

COMMENT ON TABLE BXT_STAT_PROC_HST IS '시스템설정-통계 처리 이력';

COMMENT ON COLUMN BXT_STAT_PROC_HST.PROC_BEGIN_DTTM IS '처리시작일시';

COMMENT ON COLUMN BXT_STAT_PROC_HST.PROC_BASE_DATE IS '처리기준일자';

COMMENT ON COLUMN BXT_STAT_PROC_HST.TEST_UNIT_PROC_DTTM IS '테스트유닛처리일시';

COMMENT ON COLUMN BXT_STAT_PROC_HST.PROC_END_DTTM IS '처리종료일시';

COMMENT ON COLUMN BXT_STAT_PROC_HST.METHOD_UPDT_CNT IS '메소드 변경 건수';

COMMENT ON COLUMN BXT_STAT_PROC_HST.TEST_UNIT_PROC_CNT IS '테스트유닛처리건수';

COMMENT ON COLUMN BXT_STAT_PROC_HST.PROC_BASE_DATE_UPDT_YN IS '처리기준일자변경여부';

CREATE UNIQUE INDEX PK_BXT_STAT_PROC_HST
	ON BXT_STAT_PROC_HST (
		PROC_BEGIN_DTTM ASC
	);

ALTER TABLE BXT_STAT_PROC_HST
	ADD
		CONSTRAINT PK_BXT_STAT_PROC_HST
		PRIMARY KEY (
			PROC_BEGIN_DTTM
		);

/* 시스템설정-통계 처리 키 */
CREATE TABLE BXT_STAT_KEY (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PROC_KEY VARCHAR2(100) NOT NULL, /* 처리키 */
	PROC_NM VARCHAR2(100), /* 처리 명 */
	STATS_BEGIN_DATE VARCHAR2(8), /* 통계시작일자 */
	STATS_END_DATE VARCHAR2(8) /* 통계종료일자 */
);

COMMENT ON TABLE BXT_STAT_KEY IS '시스템설정-통계 처리 키';

COMMENT ON COLUMN BXT_STAT_KEY.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_STAT_KEY.PROC_KEY IS '처리키';

COMMENT ON COLUMN BXT_STAT_KEY.PROC_NM IS '처리 명';

COMMENT ON COLUMN BXT_STAT_KEY.STATS_BEGIN_DATE IS '통계시작일자';

COMMENT ON COLUMN BXT_STAT_KEY.STATS_END_DATE IS '통계종료일자';

CREATE UNIQUE INDEX PK_BXT_STAT_KEY
	ON BXT_STAT_KEY (
		SYS_ID ASC,
		PROC_KEY ASC
	);

ALTER TABLE BXT_STAT_KEY
	ADD
		CONSTRAINT PK_BXT_STAT_KEY
		PRIMARY KEY (
			SYS_ID,
			PROC_KEY
		);

/* 시스템설정-통계 변경 이벤트 */
CREATE TABLE BXT_STAT_EVENT (
	TABLE_NM VARCHAR2(100) NOT NULL, /* 테이블명  */
	TABLE_KEY VARCHAR2(2000) NOT NULL, /* 테이블키  */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_STAT_EVENT IS '시스템설정-통계 변경 이벤트';

COMMENT ON COLUMN BXT_STAT_EVENT.TABLE_NM IS '테이블명 ';

COMMENT ON COLUMN BXT_STAT_EVENT.TABLE_KEY IS '테이블키 ';

COMMENT ON COLUMN BXT_STAT_EVENT.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_STAT_EVENT
	ON BXT_STAT_EVENT (
		TABLE_NM ASC,
		TABLE_KEY ASC
	);

ALTER TABLE BXT_STAT_EVENT
	ADD
		CONSTRAINT PK_BXT_STAT_EVENT
		PRIMARY KEY (
			TABLE_NM,
			TABLE_KEY
		);

/* 일반설정-권한 */
CREATE TABLE BXT_PERM (
	PERM_ID VARCHAR2(32) NOT NULL, /* 권한ID */
	PERM_NM VARCHAR2(100) NOT NULL, /* 권한명 */
	PERM_DESC VARCHAR2(2000), /* 권한설명 */
	PERM_CATEGORY_CD VARCHAR2(1) NOT NULL, /* 권한유형코드 */
	DEFT_MENU_ID VARCHAR2(8) /* 기본메뉴ID */
);

COMMENT ON TABLE BXT_PERM IS '일반설정-권한';

COMMENT ON COLUMN BXT_PERM.PERM_ID IS '권한ID';

COMMENT ON COLUMN BXT_PERM.PERM_NM IS '권한명';

COMMENT ON COLUMN BXT_PERM.PERM_DESC IS '권한설명';

COMMENT ON COLUMN BXT_PERM.PERM_CATEGORY_CD IS '권한유형코드';

COMMENT ON COLUMN BXT_PERM.DEFT_MENU_ID IS '기본메뉴ID';

CREATE UNIQUE INDEX PK_BXT_PERM
	ON BXT_PERM (
		PERM_ID ASC
	);

ALTER TABLE BXT_PERM
	ADD
		CONSTRAINT PK_BXT_PERM
		PRIMARY KEY (
			PERM_ID
		);

/* 일반설정-메뉴 */
CREATE TABLE BXT_MENU (
	MENU_ID VARCHAR2(8) NOT NULL, /* 메뉴ID */
	MENU_NM VARCHAR2(100) NOT NULL, /* 메뉴명 */
	MENU_DESC VARCHAR2(2000), /* 메뉴설명 */
	SEQ NUMBER(8) NOT NULL, /* 순번 */
	PARENT_MENU_ID VARCHAR2(8), /* 부모메뉴ID */
	DEL_YN VARCHAR2(1), /* 삭제 여부 */
	MENU_CATEGORY_CD VARCHAR2(2) /* 메뉴유형코드 */
);

COMMENT ON TABLE BXT_MENU IS '일반설정-메뉴';

COMMENT ON COLUMN BXT_MENU.MENU_ID IS '메뉴ID';

COMMENT ON COLUMN BXT_MENU.MENU_NM IS '메뉴명';

COMMENT ON COLUMN BXT_MENU.MENU_DESC IS '메뉴설명';

COMMENT ON COLUMN BXT_MENU.SEQ IS '순번';

COMMENT ON COLUMN BXT_MENU.PARENT_MENU_ID IS '부모메뉴ID';

COMMENT ON COLUMN BXT_MENU.DEL_YN IS '삭제 여부';

COMMENT ON COLUMN BXT_MENU.MENU_CATEGORY_CD IS '메뉴유형코드';

CREATE UNIQUE INDEX PK_BXT_MENU
	ON BXT_MENU (
		MENU_ID ASC
	);

ALTER TABLE BXT_MENU
	ADD
		CONSTRAINT PK_BXT_MENU
		PRIMARY KEY (
			MENU_ID
		);

/* 일반설정-메뉴 권한 관계 */
CREATE TABLE BXT_MENU_PERM_REL (
	MENU_ID VARCHAR2(8) NOT NULL, /* 메뉴ID */
	PERM_ID VARCHAR2(32) NOT NULL /* 권한ID */
);

COMMENT ON TABLE BXT_MENU_PERM_REL IS '일반설정-메뉴 권한 관계';

COMMENT ON COLUMN BXT_MENU_PERM_REL.MENU_ID IS '메뉴ID';

COMMENT ON COLUMN BXT_MENU_PERM_REL.PERM_ID IS '권한ID';

CREATE UNIQUE INDEX PK_BXT_MENU_PERM_REL
	ON BXT_MENU_PERM_REL (
		MENU_ID ASC,
		PERM_ID ASC
	);

ALTER TABLE BXT_MENU_PERM_REL
	ADD
		CONSTRAINT PK_BXT_MENU_PERM_REL
		PRIMARY KEY (
			MENU_ID,
			PERM_ID
		);

/* 일반설정-부서정보 */
CREATE TABLE BXT_DEPT (
	DEPT_ID VARCHAR2(32) NOT NULL, /* 부서ID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
	DEPT_NM VARCHAR2(100), /* 부서명 */
	DEPT_ENG_NM VARCHAR2(100), /* 부서영문명 */
	PARENT_DEPT_ID VARCHAR2(32) /* 부모 부서ID */
);

COMMENT ON TABLE BXT_DEPT IS '일반설정-부서정보';

COMMENT ON COLUMN BXT_DEPT.DEPT_ID IS '부서ID';

COMMENT ON COLUMN BXT_DEPT.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_DEPT.DEPT_NM IS '부서명';

COMMENT ON COLUMN BXT_DEPT.DEPT_ENG_NM IS '부서영문명';

COMMENT ON COLUMN BXT_DEPT.PARENT_DEPT_ID IS '부모 부서ID';

CREATE UNIQUE INDEX PK_BXT_DEPT
	ON BXT_DEPT (
		DEPT_ID ASC,
		SYS_ID ASC
	);

ALTER TABLE BXT_DEPT
	ADD
		CONSTRAINT PK_BXT_DEPT
		PRIMARY KEY (
			DEPT_ID,
			SYS_ID
		);

/* 일반설정-사용자 */
CREATE TABLE BXT_USER (
	USER_ID VARCHAR2(32) NOT NULL, /* 사용자ID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	USER_PWD VARCHAR2(50) NOT NULL, /* 사용자비밀번호 */
	USER_NM VARCHAR2(100) NOT NULL, /* 사용자명 */
	EMAIL VARCHAR2(2000), /* 이메일 */
	DEL_YN VARCHAR2(1) NOT NULL, /* 삭제 여부 */
	DEPT_ID VARCHAR2(32), /* 부서ID */
	ROLE_ID VARCHAR2(8), /* 역할ID */
	UPDT_DTTM VARCHAR2(23), /* 변경일시 */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_USER IS '일반설정-사용자';

COMMENT ON COLUMN BXT_USER.USER_ID IS '사용자ID';

COMMENT ON COLUMN BXT_USER.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_USER.USER_PWD IS '사용자비밀번호';

COMMENT ON COLUMN BXT_USER.USER_NM IS '사용자명';

COMMENT ON COLUMN BXT_USER.EMAIL IS '이메일';

COMMENT ON COLUMN BXT_USER.DEL_YN IS '삭제 여부';

COMMENT ON COLUMN BXT_USER.DEPT_ID IS '부서ID';

COMMENT ON COLUMN BXT_USER.ROLE_ID IS '역할ID';

COMMENT ON COLUMN BXT_USER.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_USER.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_USER
	ON BXT_USER (
		USER_ID ASC,
		SYS_ID ASC
	);

ALTER TABLE BXT_USER
	ADD
		CONSTRAINT PK_BXT_USER
		PRIMARY KEY (
			USER_ID,
			SYS_ID
		);
		
/* 일반설정-업무 그룹 */
CREATE TABLE BXT_BIZ_GRP (
	BIZ_GRP_ID VARCHAR2(32) NOT NULL, /* 업무 그룹 ID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
	PARENT_GRP_ID VARCHAR2(32), /* 부모 그룹 ID */
	BIZ_GRP_NM VARCHAR2(100) NOT NULL, /* 업무 그룹 명 */
	BIZ_GRP_DESC VARCHAR2(2000), /* 업무 그룹 설명 */
	REG_USER_ID VARCHAR2(32), /* 등록 사용자 ID */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_BIZ_GRP IS '일반설정-업무 그룹';

COMMENT ON COLUMN BXT_BIZ_GRP.BIZ_GRP_ID IS '업무 그룹 ID';

COMMENT ON COLUMN BXT_BIZ_GRP.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_BIZ_GRP.PARENT_GRP_ID IS '부모 그룹 ID';

COMMENT ON COLUMN BXT_BIZ_GRP.BIZ_GRP_NM IS '업무 그룹 명';

COMMENT ON COLUMN BXT_BIZ_GRP.BIZ_GRP_DESC IS '업무 그룹 설명';

COMMENT ON COLUMN BXT_BIZ_GRP.REG_USER_ID IS '등록 사용자 ID';

COMMENT ON COLUMN BXT_BIZ_GRP.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_BIZ_GRP
	ON BXT_BIZ_GRP (
		BIZ_GRP_ID ASC,
		SYS_ID ASC
	);

ALTER TABLE BXT_BIZ_GRP
	ADD
		CONSTRAINT PK_BXT_BIZ_GRP
		PRIMARY KEY (
			BIZ_GRP_ID,
			SYS_ID
		);

/* 일반설정-업무 그룹 패키지 */
CREATE TABLE BXT_BIZ_GRP_PKG (
	BIZ_GRP_ID VARCHAR2(32) NOT NULL, /* 업무 그룹 ID */
	PACKAGE_NM VARCHAR2(1000) NOT NULL, /* 패키지 명 */
	SYS_ID VARCHAR2(16) NOT NULL /* 시스템ID */
);

COMMENT ON TABLE BXT_BIZ_GRP_PKG IS '일반설정-업무 그룹 패키지';

COMMENT ON COLUMN BXT_BIZ_GRP_PKG.BIZ_GRP_ID IS '업무 그룹 ID';

COMMENT ON COLUMN BXT_BIZ_GRP_PKG.PACKAGE_NM IS '패키지 명';

COMMENT ON COLUMN BXT_BIZ_GRP_PKG.SYS_ID IS '시스템ID';

CREATE UNIQUE INDEX PK_BXT_BIZ_GRP_PKG
	ON BXT_BIZ_GRP_PKG (
		BIZ_GRP_ID ASC,
		PACKAGE_NM ASC,
		SYS_ID ASC
	);

ALTER TABLE BXT_BIZ_GRP_PKG
	ADD
		CONSTRAINT PK_BXT_BIZ_GRP_PKG
		PRIMARY KEY (
			BIZ_GRP_ID,
			PACKAGE_NM,
			SYS_ID
		);

/* 일반설정-역할 */
CREATE TABLE BXT_ROLE (
	ROLE_ID VARCHAR2(8) NOT NULL, /* 역할ID */
	ROLE_NM VARCHAR2(100) NOT NULL, /* 역할명 */
	ROLE_DESC VARCHAR2(2000) /* 역할설명 */
);

COMMENT ON TABLE BXT_ROLE IS '일반설정-역할';

COMMENT ON COLUMN BXT_ROLE.ROLE_ID IS '역할ID';

COMMENT ON COLUMN BXT_ROLE.ROLE_NM IS '역할명';

COMMENT ON COLUMN BXT_ROLE.ROLE_DESC IS '역할설명';

CREATE UNIQUE INDEX PK_BXT_ROLE
	ON BXT_ROLE (
		ROLE_ID ASC
	);

ALTER TABLE BXT_ROLE
	ADD
		CONSTRAINT PK_BXT_ROLE
		PRIMARY KEY (
			ROLE_ID
		);

/* 일반설정-역할 권한 관계 */
CREATE TABLE BXT_ROLE_PERM_REL (
	PERM_ID VARCHAR2(32) NOT NULL, /* 권한ID */
	ROLE_ID VARCHAR2(8) NOT NULL /* 역할ID */
);

COMMENT ON TABLE BXT_ROLE_PERM_REL IS '일반설정-역할 권한 관계';

COMMENT ON COLUMN BXT_ROLE_PERM_REL.PERM_ID IS '권한ID';

COMMENT ON COLUMN BXT_ROLE_PERM_REL.ROLE_ID IS '역할ID';

CREATE UNIQUE INDEX PK_BXT_ROLE_PERM_REL
	ON BXT_ROLE_PERM_REL (
		PERM_ID ASC,
		ROLE_ID ASC
	);

ALTER TABLE BXT_ROLE_PERM_REL
	ADD
		CONSTRAINT PK_BXT_ROLE_PERM_REL
		PRIMARY KEY (
			PERM_ID,
			ROLE_ID
		);

/* 일반설정-사용자 즐겨찾기 */
CREATE TABLE BXT_USER_BOOKMARK (
	USER_ID VARCHAR2(32) NOT NULL, /* 사용자ID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	PACKAGE_NM VARCHAR2(1000) NOT NULL /* 패키지 명 */
);

COMMENT ON TABLE BXT_USER_BOOKMARK IS '일반설정-사용자 즐겨찾기';

COMMENT ON COLUMN BXT_USER_BOOKMARK.USER_ID IS '사용자ID';

COMMENT ON COLUMN BXT_USER_BOOKMARK.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_USER_BOOKMARK.PACKAGE_NM IS '패키지 명';

CREATE UNIQUE INDEX PK_BXT_USER_BOOKMARK
	ON BXT_USER_BOOKMARK (
		USER_ID ASC,
		SYS_ID ASC,
		PACKAGE_NM ASC
	);

ALTER TABLE BXT_USER_BOOKMARK
	ADD
		CONSTRAINT PK_BXT_USER_BOOKMARK
		PRIMARY KEY (
			USER_ID,
			SYS_ID,
			PACKAGE_NM
		);

/* 테스트 유닛 */
CREATE TABLE BXT_TEST_UNIT (
	TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 테스트 유닛 UID */
	CALLER_TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 호출자 테스트 유닛 UID */
	TEST_UNIT_NM VARCHAR2(1000), /* 테스트 유닛 명 */
	ROOT_TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 루트테스트유닛UID */
	RESULT_CD VARCHAR2(1) NOT NULL, /* 결과 코드 */
	OBJECT_HASH_ID VARCHAR2(128), /* 오브젝트 해쉬ID */
	OBJECT_RCD_TRG_YN VARCHAR2(1), /* 오브젝트레코딩대상여부 */
	EXCEPTION_TEST_UNIT_UID VARCHAR2(32), /* 익셉션 테스트 유닛 UID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드 버전 해쉬ID */
	CALLER_CLASS_ID VARCHAR2(64), /* 호출자 클래스ID */
	CALLER_METHOD_ID VARCHAR2(32), /* 호출자 메소드ID */
	CALLER_METHOD_VER_HASH_ID VARCHAR2(128), /* 호출자 메소드 버전 해쉬ID */
	METHOD_CALL_CNT NUMBER(8), /* 메소드 호출 건수 */
	CST_01_FIELD_VAL VARCHAR2(50), /* 커스텀 01 필드 값 */
	CST_02_FIELD_VAL VARCHAR2(50), /* 커스텀 02 필드 값 */
	CST_03_FIELD_VAL VARCHAR2(50), /* 커스텀 03 필드 값 */
	CST_04_FIELD_VAL VARCHAR2(50), /* 커스텀 04 필드 값 */
	BASE_DATE VARCHAR2(8) NOT NULL, /* 기준일자 */
	BEGIN_DTTM VARCHAR2(23), /* 시작 일시 */
	END_DTTM VARCHAR2(23), /* 종료 일시 */
	ELAPSED_SEC NUMBER(8), /* 경과시간 초 */
	NANO_TIME NUMBER(19), /* 나노타임 */
	STATS_PROC_YN VARCHAR2(1) NOT NULL, /* 통계처리여부 */
	AGENT_ID VARCHAR2(32), /* AGENT ID */
	PROC_ID VARCHAR2(16), /* 프로세스ID */
	THREAD_NM VARCHAR2(1000), /* 쓰레드 명 */
	AGENT_CD VARCHAR2(1), /* AGENT 코드 */
	NRM_PROC_CNT NUMBER(8), /* 정상처리건수 */
	ERR_PROC_CNT NUMBER(8), /* 오류처리건수 */
	RECURS_PROC_CNT NUMBER(8) /* 재귀처리건수 */
)PARTITION BY RANGE ( BASE_DATE ) 
(
  PARTITION BXT_TEST_UNIT_201603 VALUES LESS THAN ('20160399')
,  PARTITION BXT_TEST_UNIT_201604 VALUES LESS THAN ('20160499')
,  PARTITION BXT_TEST_UNIT_201605 VALUES LESS THAN ('20160599')
,  PARTITION BXT_TEST_UNIT_201606 VALUES LESS THAN ('20160699')
,  PARTITION BXT_TEST_UNIT_201607 VALUES LESS THAN ('20160799')
,  PARTITION BXT_TEST_UNIT_201608 VALUES LESS THAN ('20160899')
,  PARTITION BXT_TEST_UNIT_201609 VALUES LESS THAN ('20160999')
,  PARTITION BXT_TEST_UNIT_201610 VALUES LESS THAN ('20161099')
,  PARTITION BXT_TEST_UNIT_201611 VALUES LESS THAN ('20161199')
,  PARTITION BXT_TEST_UNIT_201612 VALUES LESS THAN ('20161299')
,  PARTITION BXT_TEST_UNIT_201701 VALUES LESS THAN ('20170199')
,  PARTITION BXT_TEST_UNIT_201702 VALUES LESS THAN ('20170299')
);

COMMENT ON TABLE BXT_TEST_UNIT IS '테스트 유닛';

COMMENT ON COLUMN BXT_TEST_UNIT.TEST_UNIT_UID IS '테스트 유닛 UID';

COMMENT ON COLUMN BXT_TEST_UNIT.CALLER_TEST_UNIT_UID IS '호출자 테스트 유닛 UID';

COMMENT ON COLUMN BXT_TEST_UNIT.TEST_UNIT_NM IS '테스트 유닛 명';

COMMENT ON COLUMN BXT_TEST_UNIT.ROOT_TEST_UNIT_UID IS '루트테스트유닛UID';

COMMENT ON COLUMN BXT_TEST_UNIT.RESULT_CD IS '결과 코드';

COMMENT ON COLUMN BXT_TEST_UNIT.OBJECT_HASH_ID IS '오브젝트 해쉬ID';

COMMENT ON COLUMN BXT_TEST_UNIT.OBJECT_RCD_TRG_YN IS '오브젝트레코딩대상여부';

COMMENT ON COLUMN BXT_TEST_UNIT.EXCEPTION_TEST_UNIT_UID IS '익셉션 테스트 유닛 UID';

COMMENT ON COLUMN BXT_TEST_UNIT.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_TEST_UNIT.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_TEST_UNIT.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_TEST_UNIT.METHOD_VER_HASH_ID IS '메소드 버전 해쉬ID';

COMMENT ON COLUMN BXT_TEST_UNIT.CALLER_CLASS_ID IS '호출자 클래스ID';

COMMENT ON COLUMN BXT_TEST_UNIT.CALLER_METHOD_ID IS '호출자 메소드ID';

COMMENT ON COLUMN BXT_TEST_UNIT.CALLER_METHOD_VER_HASH_ID IS '호출자 메소드 버전 해쉬ID';

COMMENT ON COLUMN BXT_TEST_UNIT.METHOD_CALL_CNT IS '메소드 호출 건수';

COMMENT ON COLUMN BXT_TEST_UNIT.CST_01_FIELD_VAL IS '커스텀 01 필드 값';

COMMENT ON COLUMN BXT_TEST_UNIT.CST_02_FIELD_VAL IS '커스텀 02 필드 값';

COMMENT ON COLUMN BXT_TEST_UNIT.CST_03_FIELD_VAL IS '커스텀 03 필드 값';

COMMENT ON COLUMN BXT_TEST_UNIT.CST_04_FIELD_VAL IS '커스텀 04 필드 값';

COMMENT ON COLUMN BXT_TEST_UNIT.BASE_DATE IS '기준일자';

COMMENT ON COLUMN BXT_TEST_UNIT.BEGIN_DTTM IS '시작 일시';

COMMENT ON COLUMN BXT_TEST_UNIT.END_DTTM IS '종료 일시';

COMMENT ON COLUMN BXT_TEST_UNIT.ELAPSED_SEC IS '경과시간 초';

COMMENT ON COLUMN BXT_TEST_UNIT.NANO_TIME IS '나노타임';

COMMENT ON COLUMN BXT_TEST_UNIT.STATS_PROC_YN IS '통계처리여부';

COMMENT ON COLUMN BXT_TEST_UNIT.AGENT_ID IS 'AGENT ID';

COMMENT ON COLUMN BXT_TEST_UNIT.PROC_ID IS '프로세스ID';

COMMENT ON COLUMN BXT_TEST_UNIT.THREAD_NM IS '쓰레드 명';

COMMENT ON COLUMN BXT_TEST_UNIT.AGENT_CD IS 'AGENT 코드';

COMMENT ON COLUMN BXT_TEST_UNIT.NRM_PROC_CNT IS '정상처리건수';

COMMENT ON COLUMN BXT_TEST_UNIT.ERR_PROC_CNT IS '오류처리건수';

COMMENT ON COLUMN BXT_TEST_UNIT.RECURS_PROC_CNT IS '재귀처리건수';

CREATE UNIQUE INDEX PK_BXT_TEST_UNIT
	ON BXT_TEST_UNIT (
		TEST_UNIT_UID ASC
	);

CREATE INDEX IX_BXT_TEST_UNIT_01
	ON BXT_TEST_UNIT (
		BEGIN_DTTM ASC,
		RESULT_CD ASC,
		CLASS_ID ASC
	);

CREATE INDEX IX_BXT_TEST_UNIT_02
	ON BXT_TEST_UNIT (
		ROOT_TEST_UNIT_UID ASC,
		CALLER_TEST_UNIT_UID ASC
	);

CREATE INDEX IX_BXT_TEST_UNIT_03
	ON BXT_TEST_UNIT (
		BASE_DATE ASC,
		STATS_PROC_YN ASC,
		BEGIN_DTTM ASC
	);

ALTER TABLE BXT_TEST_UNIT
	ADD
		CONSTRAINT PK_BXT_TEST_UNIT
		PRIMARY KEY (
			TEST_UNIT_UID
		);

/* 테스트 유닛 실행라인 */
CREATE TABLE BXT_TEST_UNIT_EXEC_LINE (
	TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 테스트 유닛 UID */
	SEQ NUMBER(8) NOT NULL, /* 일련번호 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	LINE_DATA VARCHAR2(4000), /* 라인 데이터 */
	BASE_DATE VARCHAR2(8) NOT NULL, /* 기준일자 */
	REG_DTTM VARCHAR2(23) NOT NULL /* 등록 일시 */
)PARTITION BY RANGE ( BASE_DATE ) 
(
  
   PARTITION BXT_TEST_UNIT_EXEC_LINE_201603 VALUES LESS THAN ('20160399')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201604 VALUES LESS THAN ('20160499')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201605 VALUES LESS THAN ('20160599')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201606 VALUES LESS THAN ('20160699')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201607 VALUES LESS THAN ('20160799')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201608 VALUES LESS THAN ('20160899')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201609 VALUES LESS THAN ('20160999')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201610 VALUES LESS THAN ('20161099')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201611 VALUES LESS THAN ('20161199')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201612 VALUES LESS THAN ('20161299')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201701 VALUES LESS THAN ('20170199')
,  PARTITION BXT_TEST_UNIT_EXEC_LINE_201702 VALUES LESS THAN ('20170299')
);

COMMENT ON TABLE BXT_TEST_UNIT_EXEC_LINE IS '테스트 유닛 실행라인';

COMMENT ON COLUMN BXT_TEST_UNIT_EXEC_LINE.TEST_UNIT_UID IS '테스트 유닛 UID';

COMMENT ON COLUMN BXT_TEST_UNIT_EXEC_LINE.SEQ IS '일련번호';

COMMENT ON COLUMN BXT_TEST_UNIT_EXEC_LINE.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_TEST_UNIT_EXEC_LINE.LINE_DATA IS '라인 데이터';

COMMENT ON COLUMN BXT_TEST_UNIT_EXEC_LINE.BASE_DATE IS '기준일자';

COMMENT ON COLUMN BXT_TEST_UNIT_EXEC_LINE.REG_DTTM IS '등록 일시';

CREATE UNIQUE INDEX PK_BXT_TEST_UNIT_EXEC_LINE
	ON BXT_TEST_UNIT_EXEC_LINE (
		TEST_UNIT_UID ASC,
		SEQ ASC
	);

ALTER TABLE BXT_TEST_UNIT_EXEC_LINE
	ADD
		CONSTRAINT PK_BXT_TEST_UNIT_EXEC_LINE
		PRIMARY KEY (
			TEST_UNIT_UID,
			SEQ
		);

/* 테스트 유닛 오브젝트 */
CREATE TABLE BXT_TEST_UNIT_OBJECT (
	TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 테스트 유닛 UID */
	OBJECT_CD VARCHAR2(1) NOT NULL, /* 오브젝트 코드 */
	OBJECT_SEQ NUMBER(8) NOT NULL, /* 오브젝트 순번 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	OBJECT_QN VARCHAR2(1000), /* 오브젝트 퀄리파이드네임 */
	SIZE_EXCEED_YN VARCHAR2(1), /* 사이즈 초과 여부 */
	OBJECT_DATA BLOB, /* 오브젝트데이터 */
	BASE_DATE VARCHAR2(8) NOT NULL, /* 기준일자 */
	REG_DTTM VARCHAR2(23) NOT NULL /* 등록 일시 */
)PARTITION BY RANGE ( BASE_DATE ) 
(
  
   PARTITION BXT_TEST_UNIT_OBJECT_201603 VALUES LESS THAN ('20160399')
,  PARTITION BXT_TEST_UNIT_OBJECT_201604 VALUES LESS THAN ('20160499')
,  PARTITION BXT_TEST_UNIT_OBJECT_201605 VALUES LESS THAN ('20160599')
,  PARTITION BXT_TEST_UNIT_OBJECT_201606 VALUES LESS THAN ('20160699')
,  PARTITION BXT_TEST_UNIT_OBJECT_201607 VALUES LESS THAN ('20160799')
,  PARTITION BXT_TEST_UNIT_OBJECT_201608 VALUES LESS THAN ('20160899')
,  PARTITION BXT_TEST_UNIT_OBJECT_201609 VALUES LESS THAN ('20160999')
,  PARTITION BXT_TEST_UNIT_OBJECT_201610 VALUES LESS THAN ('20161099')
,  PARTITION BXT_TEST_UNIT_OBJECT_201611 VALUES LESS THAN ('20161199')
,  PARTITION BXT_TEST_UNIT_OBJECT_201612 VALUES LESS THAN ('20161299')
,  PARTITION BXT_TEST_UNIT_OBJECT_201701 VALUES LESS THAN ('20170199')
,  PARTITION BXT_TEST_UNIT_OBJECT_201702 VALUES LESS THAN ('20170299')
);

COMMENT ON TABLE BXT_TEST_UNIT_OBJECT IS '테스트 유닛 오브젝트';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.TEST_UNIT_UID IS '테스트 유닛 UID';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.OBJECT_CD IS '오브젝트 코드';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.OBJECT_SEQ IS '오브젝트 순번';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.OBJECT_QN IS '오브젝트 퀄리파이드네임';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.SIZE_EXCEED_YN IS '사이즈 초과 여부';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.OBJECT_DATA IS '오브젝트데이터';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.BASE_DATE IS '기준일자';

COMMENT ON COLUMN BXT_TEST_UNIT_OBJECT.REG_DTTM IS '등록 일시';

CREATE UNIQUE INDEX PK_BXT_TEST_UNIT_OBJECT
	ON BXT_TEST_UNIT_OBJECT (
		TEST_UNIT_UID ASC,
		OBJECT_CD ASC,
		OBJECT_SEQ ASC
	);

ALTER TABLE BXT_TEST_UNIT_OBJECT
	ADD
		CONSTRAINT PK_BXT_TEST_UNIT_OBJECT
		PRIMARY KEY (
			TEST_UNIT_UID,
			OBJECT_CD,
			OBJECT_SEQ
		);

/* 테스트 유닛 익셉션 오브젝트 */
CREATE TABLE BXT_TEST_UNIT_EXCEPTION (
	TEST_UNIT_UID VARCHAR2(32) NOT NULL, /* 테스트 유닛 UID */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	EXCEPTION_QN VARCHAR2(1000) NOT NULL, /* 익셉션 퀄리파이드네임 */
	CATCH_YN VARCHAR2(1) NOT NULL, /* CATCH 여부 */
	EXCEPTION_MSG VARCHAR2(4000), /* 익셉션 메시지 */
	OBJECT_DATA BLOB, /* 오브젝트데이터 */
	BASE_DATE VARCHAR2(8) NOT NULL, /* 기준일자 */
	REG_DTTM VARCHAR2(23) NOT NULL /* 등록 일시 */
)PARTITION BY RANGE ( BASE_DATE ) 
(
 PARTITION BXT_TEST_UNIT_EXCEPTION_201603 VALUES LESS THAN ('20160399')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201604 VALUES LESS THAN ('20160499')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201605 VALUES LESS THAN ('20160599')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201606 VALUES LESS THAN ('20160699')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201607 VALUES LESS THAN ('20160799')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201608 VALUES LESS THAN ('20160899')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201609 VALUES LESS THAN ('20160999')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201610 VALUES LESS THAN ('20161099')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201611 VALUES LESS THAN ('20161199')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201612 VALUES LESS THAN ('20161299')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201701 VALUES LESS THAN ('20170199')
,  PARTITION BXT_TEST_UNIT_EXCEPTION_201702 VALUES LESS THAN ('20170299')
);

COMMENT ON TABLE BXT_TEST_UNIT_EXCEPTION IS '테스트 유닛 익셉션 오브젝트';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.TEST_UNIT_UID IS '테스트 유닛 UID';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.EXCEPTION_QN IS '익셉션 퀄리파이드네임';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.CATCH_YN IS 'CATCH 여부';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.EXCEPTION_MSG IS '익셉션 메시지';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.OBJECT_DATA IS '오브젝트데이터';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.BASE_DATE IS '기준일자';

COMMENT ON COLUMN BXT_TEST_UNIT_EXCEPTION.REG_DTTM IS '등록 일시';

CREATE UNIQUE INDEX PK_BXT_TEST_UNIT_EXCEPTION
	ON BXT_TEST_UNIT_EXCEPTION (
		TEST_UNIT_UID ASC
	);

ALTER TABLE BXT_TEST_UNIT_EXCEPTION
	ADD
		CONSTRAINT PK_BXT_TEST_UNIT_EXCEPTION
		PRIMARY KEY (
			TEST_UNIT_UID
		);

/* 테스트 유닛 익셉션관계 */
CREATE TABLE BXT_EXCEPTION_TREE (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	EXCEPTION_QN VARCHAR2(1000) NOT NULL, /* 익셉션 퀄리파이드네임 */
	EXCEPTION_TYPE_CD VARCHAR2(1) NOT NULL, /* 익셉션 타입 코드 */
	PARENT_EXCEPTION_QN VARCHAR2(1000), /* 부모 익셉션 퀄리파이드네임 */
	UPDT_AGENT_ID VARCHAR2(32), /* 변경 AGENT ID */
	UPDT_DTTM VARCHAR2(23), /* 변경일시 */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_EXCEPTION_TREE IS '테스트 유닛 익셉션관계';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.EXCEPTION_QN IS '익셉션 퀄리파이드네임';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.EXCEPTION_TYPE_CD IS '익셉션 타입 코드';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.PARENT_EXCEPTION_QN IS '부모 익셉션 퀄리파이드네임';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.UPDT_AGENT_ID IS '변경 AGENT ID';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.UPDT_DTTM IS '변경일시';

COMMENT ON COLUMN BXT_EXCEPTION_TREE.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_EXCEPTION_TREE
	ON BXT_EXCEPTION_TREE (
		SYS_ID ASC,
		EXCEPTION_QN ASC
	);

ALTER TABLE BXT_EXCEPTION_TREE
	ADD
		CONSTRAINT PK_BXT_EXCEPTION_TREE
		PRIMARY KEY (
			SYS_ID,
			EXCEPTION_QN
		);

/* 분석 - 클래스 중복 정보 */
CREATE TABLE BXT_CLASS_DUP (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	DUP_VAL VARCHAR2(2000) NOT NULL, /* 중복 값 */
	DUP_TYPE_CD VARCHAR2(1) NOT NULL, /* 중복 타입 코드 */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_CLASS_DUP IS '분석 - 클래스 중복 정보';

COMMENT ON COLUMN BXT_CLASS_DUP.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_CLASS_DUP.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_CLASS_DUP.DUP_VAL IS '중복 값';

COMMENT ON COLUMN BXT_CLASS_DUP.DUP_TYPE_CD IS '중복 타입 코드';

COMMENT ON COLUMN BXT_CLASS_DUP.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_CLASS_DUP
	ON BXT_CLASS_DUP (
		SYS_ID ASC,
		CLASS_ID ASC,
		DUP_VAL ASC
	);

ALTER TABLE BXT_CLASS_DUP
	ADD
		CONSTRAINT PK_BXT_CLASS_DUP
		PRIMARY KEY (
			SYS_ID,
			CLASS_ID,
			DUP_VAL
		);

/* 시스템설정-설정항목 */
CREATE TABLE BXT_CFG (
	CFG_KEY VARCHAR2(100) NOT NULL, /* 설정 키 */
	CFG_GRP_CD VARCHAR2(1) NOT NULL, /* 설정 그룹코드 */
	CFG_VAL_TYPE_CD VARCHAR2(1) NOT NULL, /* 설정값 타입코드 */
	CFG_VAL_CD_ID VARCHAR2(100), /* 설정값 코드ID */
	CFG_NM VARCHAR2(100) NOT NULL, /* 설정 명 */
	CFG_DESC VARCHAR2(2000), /* 설정 설명 */
	DEL_YN VARCHAR2(1) NOT NULL /* 삭제 여부 */
);

COMMENT ON TABLE BXT_CFG IS '시스템설정-설정항목';

COMMENT ON COLUMN BXT_CFG.CFG_KEY IS '설정 키';

COMMENT ON COLUMN BXT_CFG.CFG_GRP_CD IS '설정 그룹코드';

COMMENT ON COLUMN BXT_CFG.CFG_VAL_TYPE_CD IS '설정값 타입코드';

COMMENT ON COLUMN BXT_CFG.CFG_VAL_CD_ID IS '설정값 코드ID';

COMMENT ON COLUMN BXT_CFG.CFG_NM IS '설정 명';

COMMENT ON COLUMN BXT_CFG.CFG_DESC IS '설정 설명';

COMMENT ON COLUMN BXT_CFG.DEL_YN IS '삭제 여부';

CREATE UNIQUE INDEX PK_BXT_CFG
	ON BXT_CFG (
		CFG_KEY ASC
	);

ALTER TABLE BXT_CFG
	ADD
		CONSTRAINT PK_BXT_CFG
		PRIMARY KEY (
			CFG_KEY
		);

/* 시스템설정-설정항목값 */
CREATE TABLE BXT_CFG_VAL (
	CFG_KEY VARCHAR2(100) NOT NULL, /* 설정 키 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID  */
	CFG_RANGE_CD VARCHAR2(1) NOT NULL, /* 설정 범위코드 */
	CFG_TRG_ID VARCHAR2(32) NOT NULL, /* 설정 대상ID */
	CFG_SEQ VARCHAR2(256) NOT NULL, /* 설정 일련번호 */
	CFG_VAL VARCHAR2(2000) /* 설정 값 */
);

COMMENT ON TABLE BXT_CFG_VAL IS '시스템설정-설정항목값';

COMMENT ON COLUMN BXT_CFG_VAL.CFG_KEY IS '설정 키';

COMMENT ON COLUMN BXT_CFG_VAL.SYS_ID IS '시스템ID ';

COMMENT ON COLUMN BXT_CFG_VAL.CFG_RANGE_CD IS '설정 범위코드';

COMMENT ON COLUMN BXT_CFG_VAL.CFG_TRG_ID IS '설정 대상ID';

COMMENT ON COLUMN BXT_CFG_VAL.CFG_SEQ IS '설정 일련번호';

COMMENT ON COLUMN BXT_CFG_VAL.CFG_VAL IS '설정 값';

CREATE UNIQUE INDEX PK_BXT_CFG_VAL
	ON BXT_CFG_VAL (
		CFG_KEY ASC,
		SYS_ID ASC,
		CFG_RANGE_CD ASC,
		CFG_TRG_ID ASC,
		CFG_SEQ ASC
	);

ALTER TABLE BXT_CFG_VAL
	ADD
		CONSTRAINT PK_BXT_CFG_VAL
		PRIMARY KEY (
			CFG_KEY,
			SYS_ID,
			CFG_RANGE_CD,
			CFG_TRG_ID,
			CFG_SEQ
		);

/* 분석-Inspection 규칙 별 클래스 제외 정보 */
CREATE TABLE BXT_INSP_EXCLD (
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템 ID */
	RULE_ID VARCHAR2(128) NOT NULL, /* 규칙ID */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스 ID */
	CLASS_QN VARCHAR2(1000) NOT NULL, /* 클래스 퀄리파이드네임 */
	EXCLD_REASN_DESC VARCHAR2(2000) NOT NULL, /* 제외 사유 설명 */
	REJECT_REASN_DESC VARCHAR2(2000), /* 반려 사유 설명 */
	EXCLD_STATUS_CD VARCHAR2(1), /* 제외 상태 코드 */
	REQ_USER_ID VARCHAR2(32), /* 요청사용자ID */
	REG_USER_ID VARCHAR2(32), /* 등록사용자ID */
	REQ_DTTM VARCHAR2(23), /* 요청일시 */
	REG_DTTM VARCHAR2(23) /* 등록일시 */
);

COMMENT ON TABLE BXT_INSP_EXCLD IS '분석-Inspection 규칙 별 클래스 제외 정보';

COMMENT ON COLUMN BXT_INSP_EXCLD.SYS_ID IS '시스템 ID';

COMMENT ON COLUMN BXT_INSP_EXCLD.RULE_ID IS '규칙ID';

COMMENT ON COLUMN BXT_INSP_EXCLD.CLASS_ID IS '클래스 ID';

COMMENT ON COLUMN BXT_INSP_EXCLD.CLASS_QN IS '클래스 퀄리파이드네임';

COMMENT ON COLUMN BXT_INSP_EXCLD.EXCLD_REASN_DESC IS '제외 사유 설명';

COMMENT ON COLUMN BXT_INSP_EXCLD.REJECT_REASN_DESC IS '반려 사유 설명';

COMMENT ON COLUMN BXT_INSP_EXCLD.EXCLD_STATUS_CD IS '제외 상태 코드';

COMMENT ON COLUMN BXT_INSP_EXCLD.REQ_USER_ID IS '요청사용자ID';

COMMENT ON COLUMN BXT_INSP_EXCLD.REG_USER_ID IS '등록사용자ID';

COMMENT ON COLUMN BXT_INSP_EXCLD.REQ_DTTM IS '요청일시';

COMMENT ON COLUMN BXT_INSP_EXCLD.REG_DTTM IS '등록일시';

CREATE UNIQUE INDEX PK_BXT_INSP_EXCLD
	ON BXT_INSP_EXCLD (
		SYS_ID ASC,
		RULE_ID ASC,
		CLASS_ID ASC
	);

ALTER TABLE BXT_INSP_EXCLD
	ADD
		CONSTRAINT PK_BXT_INSP_EXCLD
		PRIMARY KEY (
			SYS_ID,
			RULE_ID,
			CLASS_ID
		);

/* 2차통계-익셉션 버전별 실행 패턴 */
CREATE TABLE BXT_STAT_EXCEPTION_HST (
	PROC_BASE_DATE VARCHAR2(8) NOT NULL, /* 처리기준일자 */
	SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
	EXCEPTION_QN VARCHAR2(1000) NOT NULL, /* 익셉션 퀄리파이드 네임 */
	CLASS_ID VARCHAR2(64) NOT NULL, /* 클래스ID */
	METHOD_ID VARCHAR2(32) NOT NULL, /* 메소드ID */
	METHOD_VER_HASH_ID VARCHAR2(128) NOT NULL, /* 메소드버전해쉬ID */
	CATCH_YN VARCHAR2(1) NOT NULL, /* CATCH 여부 */
	OCCR_EXCEPTION_CNT NUMBER(8), /* 발생익셉션건수 */
	FRST_TEST_DTTM VARCHAR2(23), /* 최초테스트일시 */
	LAST_TEST_DTTM VARCHAR2(23) /* 최종 테스트일시 */
)PARTITION BY RANGE ( PROC_BASE_DATE ) 
(
  PARTITION BXT_STAT_EXCEPTION_HST_2016 VALUES LESS THAN ('20169999')
,  PARTITION BXT_STAT_EXCEPTION_HST_2017 VALUES LESS THAN ('20179999')
,  PARTITION BXT_STAT_EXCEPTION_HST_2018 VALUES LESS THAN ('20189999')
,  PARTITION BXT_STAT_EXCEPTION_HST_2019 VALUES LESS THAN ('20199999')
,  PARTITION BXT_STAT_EXCEPTION_HST_2020 VALUES LESS THAN ('20209999')
);

COMMENT ON TABLE BXT_STAT_EXCEPTION_HST IS '2차통계-익셉션 버전별 실행 패턴';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.PROC_BASE_DATE IS '처리기준일자';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.EXCEPTION_QN IS '익셉션 퀄리파이드 네임';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.CLASS_ID IS '클래스ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.METHOD_ID IS '메소드ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.METHOD_VER_HASH_ID IS '메소드버전해쉬ID';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.CATCH_YN IS 'CATCH 여부';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.OCCR_EXCEPTION_CNT IS '발생익셉션건수';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.FRST_TEST_DTTM IS '최초테스트일시';

COMMENT ON COLUMN BXT_STAT_EXCEPTION_HST.LAST_TEST_DTTM IS '최종 테스트일시';

CREATE UNIQUE INDEX PK_BXT_STAT_EXCEPTION_HST
	ON BXT_STAT_EXCEPTION_HST (
		PROC_BASE_DATE ASC,
		SYS_ID ASC,
		EXCEPTION_QN ASC,
		CLASS_ID ASC,
		METHOD_ID ASC,
		METHOD_VER_HASH_ID ASC,
		CATCH_YN ASC
	);

ALTER TABLE BXT_STAT_EXCEPTION_HST
	ADD
		CONSTRAINT PK_BXT_STAT_EXCEPTION_HST
		PRIMARY KEY (
			PROC_BASE_DATE,
			SYS_ID,
			EXCEPTION_QN,
			CLASS_ID,
			METHOD_ID,
			METHOD_VER_HASH_ID,
			CATCH_YN
		);
		
		
CREATE TABLE BXT_CLASS_OWNER_RULE (
			SYS_ID VARCHAR2(16) NOT NULL, /* 시스템ID */
			AGENT_GRP_ID VARCHAR2(32) NOT NULL, /* AGENT 그룹 ID */
			PACKAGE_NM VARCHAR2(1000) NOT NULL, /* 패키지 명 */
			USER_ID VARCHAR2(32) NOT NULL /* 사용자ID */
);
		
COMMENT ON TABLE BXT_CLASS_OWNER_RULE IS '클래스 소유자 규칙';

COMMENT ON COLUMN BXT_CLASS_OWNER_RULE.SYS_ID IS '시스템ID';

COMMENT ON COLUMN BXT_CLASS_OWNER_RULE.AGENT_GRP_ID IS 'AGENT 그룹 ID';

COMMENT ON COLUMN BXT_CLASS_OWNER_RULE.PACKAGE_NM IS '패키지 명';

COMMENT ON COLUMN BXT_CLASS_OWNER_RULE.USER_ID IS '사용자ID';

CREATE UNIQUE INDEX PK_BXT_CLASS_OWNER_RULE
	ON BXT_CLASS_OWNER_RULE (
		SYS_ID ASC,
		AGENT_GRP_ID ASC,
		PACKAGE_NM ASC
	);

ALTER TABLE BXT_CLASS_OWNER_RULE
	ADD
		CONSTRAINT PK_BXT_CLASS_OWNER_RULE
		PRIMARY KEY (
			SYS_ID,
			AGENT_GRP_ID,
			PACKAGE_NM
		);
				